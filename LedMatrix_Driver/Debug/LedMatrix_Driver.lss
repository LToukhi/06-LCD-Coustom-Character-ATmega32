
LedMatrix_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002722  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002722  00002796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a4c  00000000  00000000  000027a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bd3  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004eff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000506f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000950b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <main>
      7a:	0c 94 8f 13 	jmp	0x271e	; 0x271e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 80 13 	jmp	0x2700	; 0x2700 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_voidPortMode>:
#define DIO_PIND_Reg     *((volatile u8*) 0x30)

//port mode func///////////////////////////////////

void MDIO_voidPortMode(u8 A_u8Port , u8 A_u8Mode)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <MDIO_voidPortMode+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <MDIO_voidPortMode+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Port <= PORTD)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	84 30       	cpi	r24, 0x04	; 4
     b4a:	90 f5       	brcc	.+100    	; 0xbb0 <MDIO_voidPortMode+0x7a>
	{
		switch(A_u8Port)
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	3c 83       	std	Y+4, r19	; 0x04
     b54:	2b 83       	std	Y+3, r18	; 0x03
     b56:	8b 81       	ldd	r24, Y+3	; 0x03
     b58:	9c 81       	ldd	r25, Y+4	; 0x04
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	91 05       	cpc	r25, r1
     b5e:	d1 f0       	breq	.+52     	; 0xb94 <MDIO_voidPortMode+0x5e>
     b60:	2b 81       	ldd	r18, Y+3	; 0x03
     b62:	3c 81       	ldd	r19, Y+4	; 0x04
     b64:	22 30       	cpi	r18, 0x02	; 2
     b66:	31 05       	cpc	r19, r1
     b68:	2c f4       	brge	.+10     	; 0xb74 <MDIO_voidPortMode+0x3e>
     b6a:	8b 81       	ldd	r24, Y+3	; 0x03
     b6c:	9c 81       	ldd	r25, Y+4	; 0x04
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	61 f0       	breq	.+24     	; 0xb8a <MDIO_voidPortMode+0x54>
     b72:	1e c0       	rjmp	.+60     	; 0xbb0 <MDIO_voidPortMode+0x7a>
     b74:	2b 81       	ldd	r18, Y+3	; 0x03
     b76:	3c 81       	ldd	r19, Y+4	; 0x04
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	81 f0       	breq	.+32     	; 0xb9e <MDIO_voidPortMode+0x68>
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	91 05       	cpc	r25, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <MDIO_voidPortMode+0x72>
     b88:	13 c0       	rjmp	.+38     	; 0xbb0 <MDIO_voidPortMode+0x7a>
		{
			case PORTA : DIO_DDRA_Reg = A_u8Mode ; break ;
     b8a:	ea e3       	ldi	r30, 0x3A	; 58
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	80 83       	st	Z, r24
     b92:	0e c0       	rjmp	.+28     	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTB : DIO_DDRB_Reg = A_u8Mode ; break ;
     b94:	e7 e3       	ldi	r30, 0x37	; 55
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	80 83       	st	Z, r24
     b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTC : DIO_DDRC_Reg = A_u8Mode ; break ;
     b9e:	e4 e3       	ldi	r30, 0x34	; 52
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	80 83       	st	Z, r24
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <MDIO_voidPortMode+0x7a>
			case PORTD : DIO_DDRD_Reg = A_u8Mode ; break ;
     ba8:	e1 e3       	ldi	r30, 0x31	; 49
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
		}
	}
}
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <MDIO_voidPortValue>:


//port value////////////////////////////
void MDIO_voidPortValue(u8 A_u8Port , u8 A_u8Value)
{
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	00 d0       	rcall	.+0      	; 0xbc4 <MDIO_voidPortValue+0x6>
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <MDIO_voidPortValue+0x8>
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8Port <= PORTD)
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	84 30       	cpi	r24, 0x04	; 4
     bd2:	90 f5       	brcc	.+100    	; 0xc38 <MDIO_voidPortValue+0x7a>
	{
		switch(A_u8Port)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	3c 83       	std	Y+4, r19	; 0x04
     bdc:	2b 83       	std	Y+3, r18	; 0x03
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	9c 81       	ldd	r25, Y+4	; 0x04
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	91 05       	cpc	r25, r1
     be6:	d1 f0       	breq	.+52     	; 0xc1c <MDIO_voidPortValue+0x5e>
     be8:	2b 81       	ldd	r18, Y+3	; 0x03
     bea:	3c 81       	ldd	r19, Y+4	; 0x04
     bec:	22 30       	cpi	r18, 0x02	; 2
     bee:	31 05       	cpc	r19, r1
     bf0:	2c f4       	brge	.+10     	; 0xbfc <MDIO_voidPortValue+0x3e>
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	61 f0       	breq	.+24     	; 0xc12 <MDIO_voidPortValue+0x54>
     bfa:	1e c0       	rjmp	.+60     	; 0xc38 <MDIO_voidPortValue+0x7a>
     bfc:	2b 81       	ldd	r18, Y+3	; 0x03
     bfe:	3c 81       	ldd	r19, Y+4	; 0x04
     c00:	22 30       	cpi	r18, 0x02	; 2
     c02:	31 05       	cpc	r19, r1
     c04:	81 f0       	breq	.+32     	; 0xc26 <MDIO_voidPortValue+0x68>
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	83 30       	cpi	r24, 0x03	; 3
     c0c:	91 05       	cpc	r25, r1
     c0e:	81 f0       	breq	.+32     	; 0xc30 <MDIO_voidPortValue+0x72>
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <MDIO_voidPortValue+0x7a>
		{
			case PORTA : DIO_PORTA_Reg = A_u8Value ; break ;
     c12:	eb e3       	ldi	r30, 0x3B	; 59
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	80 83       	st	Z, r24
     c1a:	0e c0       	rjmp	.+28     	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTB : DIO_PORTB_Reg = A_u8Value ; break ;
     c1c:	e8 e3       	ldi	r30, 0x38	; 56
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTC : DIO_PORTC_Reg = A_u8Value ; break ;
     c26:	e5 e3       	ldi	r30, 0x35	; 53
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	8a 81       	ldd	r24, Y+2	; 0x02
     c2c:	80 83       	st	Z, r24
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <MDIO_voidPortValue+0x7a>
			case PORTD : DIO_PORTD_Reg = A_u8Value ; break ;
     c30:	e2 e3       	ldi	r30, 0x32	; 50
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	80 83       	st	Z, r24
		}
	}
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <MDIO_voidPinMode>:

//pin mode func///////////////////////////////////////////////

void MDIO_voidPinMode(u8 A_u8Port , u8 A_u8Pin , u8 A_u8Mode)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	27 97       	sbiw	r28, 0x07	; 7
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	89 83       	std	Y+1, r24	; 0x01
     c5c:	6a 83       	std	Y+2, r22	; 0x02
     c5e:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	08 f0       	brcs	.+2      	; 0xc68 <MDIO_voidPinMode+0x22>
     c66:	f4 c0       	rjmp	.+488    	; 0xe50 <MDIO_voidPinMode+0x20a>
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	88 30       	cpi	r24, 0x08	; 8
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <MDIO_voidPinMode+0x2a>
     c6e:	f0 c0       	rjmp	.+480    	; 0xe50 <MDIO_voidPinMode+0x20a>
	{
		if ((A_u8Mode == OUTPUT) || (A_u8Mode == 1))
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	8f 3f       	cpi	r24, 0xFF	; 255
     c74:	21 f0       	breq	.+8      	; 0xc7e <MDIO_voidPinMode+0x38>
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	09 f0       	breq	.+2      	; 0xc7e <MDIO_voidPinMode+0x38>
     c7c:	6f c0       	rjmp	.+222    	; 0xd5c <MDIO_voidPinMode+0x116>
		{
			switch(A_u8Port)
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	28 2f       	mov	r18, r24
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	3f 83       	std	Y+7, r19	; 0x07
     c86:	2e 83       	std	Y+6, r18	; 0x06
     c88:	8e 81       	ldd	r24, Y+6	; 0x06
     c8a:	9f 81       	ldd	r25, Y+7	; 0x07
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	91 05       	cpc	r25, r1
     c90:	49 f1       	breq	.+82     	; 0xce4 <MDIO_voidPinMode+0x9e>
     c92:	2e 81       	ldd	r18, Y+6	; 0x06
     c94:	3f 81       	ldd	r19, Y+7	; 0x07
     c96:	22 30       	cpi	r18, 0x02	; 2
     c98:	31 05       	cpc	r19, r1
     c9a:	2c f4       	brge	.+10     	; 0xca6 <MDIO_voidPinMode+0x60>
     c9c:	8e 81       	ldd	r24, Y+6	; 0x06
     c9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ca0:	00 97       	sbiw	r24, 0x00	; 0
     ca2:	61 f0       	breq	.+24     	; 0xcbc <MDIO_voidPinMode+0x76>
     ca4:	d5 c0       	rjmp	.+426    	; 0xe50 <MDIO_voidPinMode+0x20a>
     ca6:	2e 81       	ldd	r18, Y+6	; 0x06
     ca8:	3f 81       	ldd	r19, Y+7	; 0x07
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	31 05       	cpc	r19, r1
     cae:	71 f1       	breq	.+92     	; 0xd0c <MDIO_voidPinMode+0xc6>
     cb0:	8e 81       	ldd	r24, Y+6	; 0x06
     cb2:	9f 81       	ldd	r25, Y+7	; 0x07
     cb4:	83 30       	cpi	r24, 0x03	; 3
     cb6:	91 05       	cpc	r25, r1
     cb8:	e9 f1       	breq	.+122    	; 0xd34 <MDIO_voidPinMode+0xee>
     cba:	ca c0       	rjmp	.+404    	; 0xe50 <MDIO_voidPinMode+0x20a>
			{
				case PORTA : LMTH_SetBit(DIO_DDRA_Reg , A_u8Pin) ; break ;
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <MDIO_voidPinMode+0x94>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <MDIO_voidPinMode+0x90>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	b6 c0       	rjmp	.+364    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTB : LMTH_SetBit(DIO_DDRB_Reg , A_u8Pin) ; break ;
     ce4:	a7 e3       	ldi	r26, 0x37	; 55
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e7 e3       	ldi	r30, 0x37	; 55
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <MDIO_voidPinMode+0xbc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <MDIO_voidPinMode+0xb8>
     d06:	84 2b       	or	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	a2 c0       	rjmp	.+324    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTC : LMTH_SetBit(DIO_DDRC_Reg , A_u8Pin) ; break ;
     d0c:	a4 e3       	ldi	r26, 0x34	; 52
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e4 e3       	ldi	r30, 0x34	; 52
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <MDIO_voidPinMode+0xe4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <MDIO_voidPinMode+0xe0>
     d2e:	84 2b       	or	r24, r20
     d30:	8c 93       	st	X, r24
     d32:	8e c0       	rjmp	.+284    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTD : LMTH_SetBit(DIO_DDRD_Reg , A_u8Pin) ; break ;
     d34:	a1 e3       	ldi	r26, 0x31	; 49
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e1 e3       	ldi	r30, 0x31	; 49
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	48 2f       	mov	r20, r24
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	02 2e       	mov	r0, r18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <MDIO_voidPinMode+0x10c>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	0a 94       	dec	r0
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <MDIO_voidPinMode+0x108>
     d56:	84 2b       	or	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	7a c0       	rjmp	.+244    	; 0xe50 <MDIO_voidPinMode+0x20a>
			}
		}
		else if ((A_u8Mode == INPUT) || (A_u8Mode == 0))
     d5c:	8b 81       	ldd	r24, Y+3	; 0x03
     d5e:	88 23       	and	r24, r24
     d60:	21 f0       	breq	.+8      	; 0xd6a <MDIO_voidPinMode+0x124>
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	88 23       	and	r24, r24
     d66:	09 f0       	breq	.+2      	; 0xd6a <MDIO_voidPinMode+0x124>
     d68:	73 c0       	rjmp	.+230    	; 0xe50 <MDIO_voidPinMode+0x20a>
		{
			switch(A_u8Port)
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	3d 83       	std	Y+5, r19	; 0x05
     d72:	2c 83       	std	Y+4, r18	; 0x04
     d74:	8c 81       	ldd	r24, Y+4	; 0x04
     d76:	9d 81       	ldd	r25, Y+5	; 0x05
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	59 f1       	breq	.+86     	; 0xdd4 <MDIO_voidPinMode+0x18e>
     d7e:	2c 81       	ldd	r18, Y+4	; 0x04
     d80:	3d 81       	ldd	r19, Y+5	; 0x05
     d82:	22 30       	cpi	r18, 0x02	; 2
     d84:	31 05       	cpc	r19, r1
     d86:	2c f4       	brge	.+10     	; 0xd92 <MDIO_voidPinMode+0x14c>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	69 f0       	breq	.+26     	; 0xdaa <MDIO_voidPinMode+0x164>
     d90:	5f c0       	rjmp	.+190    	; 0xe50 <MDIO_voidPinMode+0x20a>
     d92:	2c 81       	ldd	r18, Y+4	; 0x04
     d94:	3d 81       	ldd	r19, Y+5	; 0x05
     d96:	22 30       	cpi	r18, 0x02	; 2
     d98:	31 05       	cpc	r19, r1
     d9a:	89 f1       	breq	.+98     	; 0xdfe <MDIO_voidPinMode+0x1b8>
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	9d 81       	ldd	r25, Y+5	; 0x05
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	91 05       	cpc	r25, r1
     da4:	09 f4       	brne	.+2      	; 0xda8 <MDIO_voidPinMode+0x162>
     da6:	40 c0       	rjmp	.+128    	; 0xe28 <MDIO_voidPinMode+0x1e2>
     da8:	53 c0       	rjmp	.+166    	; 0xe50 <MDIO_voidPinMode+0x20a>
			{
				case PORTA : LMTH_ClrBit(DIO_DDRA_Reg , A_u8Pin) ; break ;
     daa:	aa e3       	ldi	r26, 0x3A	; 58
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	ea e3       	ldi	r30, 0x3A	; 58
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <MDIO_voidPinMode+0x182>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <MDIO_voidPinMode+0x17e>
     dcc:	80 95       	com	r24
     dce:	84 23       	and	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	3e c0       	rjmp	.+124    	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTB : LMTH_ClrBit(DIO_DDRB_Reg , A_u8Pin) ; break ;
     dd4:	a7 e3       	ldi	r26, 0x37	; 55
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e7 e3       	ldi	r30, 0x37	; 55
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <MDIO_voidPinMode+0x1ac>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <MDIO_voidPinMode+0x1a8>
     df6:	80 95       	com	r24
     df8:	84 23       	and	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	29 c0       	rjmp	.+82     	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTC : LMTH_ClrBit(DIO_DDRC_Reg , A_u8Pin) ; break ;
     dfe:	a4 e3       	ldi	r26, 0x34	; 52
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e4 e3       	ldi	r30, 0x34	; 52
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <MDIO_voidPinMode+0x1d6>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <MDIO_voidPinMode+0x1d2>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	14 c0       	rjmp	.+40     	; 0xe50 <MDIO_voidPinMode+0x20a>
				case PORTD : LMTH_ClrBit(DIO_DDRD_Reg , A_u8Pin) ; break ;
     e28:	a1 e3       	ldi	r26, 0x31	; 49
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e1 e3       	ldi	r30, 0x31	; 49
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <MDIO_voidPinMode+0x200>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <MDIO_voidPinMode+0x1fc>
     e4a:	80 95       	com	r24
     e4c:	84 23       	and	r24, r20
     e4e:	8c 93       	st	X, r24
			}
		}
	}
}
     e50:	27 96       	adiw	r28, 0x07	; 7
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <MDIO_voidPinValue>:

//pin output func/////////////////////////////////////

void MDIO_voidPinValue(u8 A_u8Port , u8 A_u8Pin , u8 A_u8Value)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	27 97       	sbiw	r28, 0x07	; 7
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
     e7a:	4b 83       	std	Y+3, r20	; 0x03
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	84 30       	cpi	r24, 0x04	; 4
     e80:	08 f0       	brcs	.+2      	; 0xe84 <MDIO_voidPinValue+0x22>
     e82:	f4 c0       	rjmp	.+488    	; 0x106c <MDIO_voidPinValue+0x20a>
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	88 30       	cpi	r24, 0x08	; 8
     e88:	08 f0       	brcs	.+2      	; 0xe8c <MDIO_voidPinValue+0x2a>
     e8a:	f0 c0       	rjmp	.+480    	; 0x106c <MDIO_voidPinValue+0x20a>
	{
		if ((A_u8Value == HIGH) || (A_u8Value == 1))
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	21 f0       	breq	.+8      	; 0xe9a <MDIO_voidPinValue+0x38>
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <MDIO_voidPinValue+0x38>
     e98:	6f c0       	rjmp	.+222    	; 0xf78 <MDIO_voidPinValue+0x116>
		{
			switch(A_u8Port)
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	3f 83       	std	Y+7, r19	; 0x07
     ea2:	2e 83       	std	Y+6, r18	; 0x06
     ea4:	8e 81       	ldd	r24, Y+6	; 0x06
     ea6:	9f 81       	ldd	r25, Y+7	; 0x07
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	91 05       	cpc	r25, r1
     eac:	49 f1       	breq	.+82     	; 0xf00 <MDIO_voidPinValue+0x9e>
     eae:	2e 81       	ldd	r18, Y+6	; 0x06
     eb0:	3f 81       	ldd	r19, Y+7	; 0x07
     eb2:	22 30       	cpi	r18, 0x02	; 2
     eb4:	31 05       	cpc	r19, r1
     eb6:	2c f4       	brge	.+10     	; 0xec2 <MDIO_voidPinValue+0x60>
     eb8:	8e 81       	ldd	r24, Y+6	; 0x06
     eba:	9f 81       	ldd	r25, Y+7	; 0x07
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	61 f0       	breq	.+24     	; 0xed8 <MDIO_voidPinValue+0x76>
     ec0:	d5 c0       	rjmp	.+426    	; 0x106c <MDIO_voidPinValue+0x20a>
     ec2:	2e 81       	ldd	r18, Y+6	; 0x06
     ec4:	3f 81       	ldd	r19, Y+7	; 0x07
     ec6:	22 30       	cpi	r18, 0x02	; 2
     ec8:	31 05       	cpc	r19, r1
     eca:	71 f1       	breq	.+92     	; 0xf28 <MDIO_voidPinValue+0xc6>
     ecc:	8e 81       	ldd	r24, Y+6	; 0x06
     ece:	9f 81       	ldd	r25, Y+7	; 0x07
     ed0:	83 30       	cpi	r24, 0x03	; 3
     ed2:	91 05       	cpc	r25, r1
     ed4:	e9 f1       	breq	.+122    	; 0xf50 <MDIO_voidPinValue+0xee>
     ed6:	ca c0       	rjmp	.+404    	; 0x106c <MDIO_voidPinValue+0x20a>
			{
				case PORTA : LMTH_SetBit(DIO_PORTA_Reg , A_u8Pin) ; break ;
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidPinValue+0x94>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidPinValue+0x90>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	b6 c0       	rjmp	.+364    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTB : LMTH_SetBit(DIO_PORTB_Reg , A_u8Pin) ; break ;
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidPinValue+0xbc>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidPinValue+0xb8>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	a2 c0       	rjmp	.+324    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTC : LMTH_SetBit(DIO_PORTC_Reg , A_u8Pin) ; break ;
     f28:	a5 e3       	ldi	r26, 0x35	; 53
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <MDIO_voidPinValue+0xe4>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <MDIO_voidPinValue+0xe0>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	8e c0       	rjmp	.+284    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTD : LMTH_SetBit(DIO_PORTD_Reg , A_u8Pin) ; break ;
     f50:	a2 e3       	ldi	r26, 0x32	; 50
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e2 e3       	ldi	r30, 0x32	; 50
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <MDIO_voidPinValue+0x10c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <MDIO_voidPinValue+0x108>
     f72:	84 2b       	or	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	7a c0       	rjmp	.+244    	; 0x106c <MDIO_voidPinValue+0x20a>
			}
		}
		else if ((A_u8Value == LOW) || (A_u8Value == 0))
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	88 23       	and	r24, r24
     f7c:	21 f0       	breq	.+8      	; 0xf86 <MDIO_voidPinValue+0x124>
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <MDIO_voidPinValue+0x124>
     f84:	73 c0       	rjmp	.+230    	; 0x106c <MDIO_voidPinValue+0x20a>
		{
			switch(A_u8Port)
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	59 f1       	breq	.+86     	; 0xff0 <MDIO_voidPinValue+0x18e>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f4       	brge	.+10     	; 0xfae <MDIO_voidPinValue+0x14c>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f0       	breq	.+26     	; 0xfc6 <MDIO_voidPinValue+0x164>
     fac:	5f c0       	rjmp	.+190    	; 0x106c <MDIO_voidPinValue+0x20a>
     fae:	2c 81       	ldd	r18, Y+4	; 0x04
     fb0:	3d 81       	ldd	r19, Y+5	; 0x05
     fb2:	22 30       	cpi	r18, 0x02	; 2
     fb4:	31 05       	cpc	r19, r1
     fb6:	89 f1       	breq	.+98     	; 0x101a <MDIO_voidPinValue+0x1b8>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <MDIO_voidPinValue+0x162>
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <MDIO_voidPinValue+0x1e2>
     fc4:	53 c0       	rjmp	.+166    	; 0x106c <MDIO_voidPinValue+0x20a>
			{
				case PORTA : LMTH_ClrBit(DIO_PORTA_Reg , A_u8Pin) ; break ;
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_voidPinValue+0x182>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_voidPinValue+0x17e>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
     fee:	3e c0       	rjmp	.+124    	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTB : LMTH_ClrBit(DIO_PORTB_Reg , A_u8Pin) ; break ;
     ff0:	a8 e3       	ldi	r26, 0x38	; 56
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e8 e3       	ldi	r30, 0x38	; 56
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <MDIO_voidPinValue+0x1ac>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <MDIO_voidPinValue+0x1a8>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	29 c0       	rjmp	.+82     	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTC : LMTH_ClrBit(DIO_PORTC_Reg , A_u8Pin) ; break ;
    101a:	a5 e3       	ldi	r26, 0x35	; 53
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e3       	ldi	r30, 0x35	; 53
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <MDIO_voidPinValue+0x1d6>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <MDIO_voidPinValue+0x1d2>
    103c:	80 95       	com	r24
    103e:	84 23       	and	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	14 c0       	rjmp	.+40     	; 0x106c <MDIO_voidPinValue+0x20a>
				case PORTD : LMTH_ClrBit(DIO_PORTD_Reg , A_u8Pin) ; break ;
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <MDIO_voidPinValue+0x200>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <MDIO_voidPinValue+0x1fc>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
			}
		}
	}
}
    106c:	27 96       	adiw	r28, 0x07	; 7
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <MDIO_u8PinRead>:

//pin read func////////////////////////

u8 MDIO_u8PinRead(u8 A_u8Port , u8 A_u8Pin)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <MDIO_u8PinRead+0x6>
    1084:	00 d0       	rcall	.+0      	; 0x1086 <MDIO_u8PinRead+0x8>
    1086:	0f 92       	push	r0
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	8a 83       	std	Y+2, r24	; 0x02
    108e:	6b 83       	std	Y+3, r22	; 0x03
	u8 read ;
	if((A_u8Port<=PORTD) && (A_u8Pin<=7))
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	08 f0       	brcs	.+2      	; 0x1098 <MDIO_u8PinRead+0x1a>
    1096:	6b c0       	rjmp	.+214    	; 0x116e <MDIO_u8PinRead+0xf0>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 30       	cpi	r24, 0x08	; 8
    109c:	08 f0       	brcs	.+2      	; 0x10a0 <MDIO_u8PinRead+0x22>
    109e:	67 c0       	rjmp	.+206    	; 0x116e <MDIO_u8PinRead+0xf0>
	{
		switch(A_u8Port)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	4c 81       	ldd	r20, Y+4	; 0x04
    10ac:	5d 81       	ldd	r21, Y+5	; 0x05
    10ae:	41 30       	cpi	r20, 0x01	; 1
    10b0:	51 05       	cpc	r21, r1
    10b2:	41 f1       	breq	.+80     	; 0x1104 <MDIO_u8PinRead+0x86>
    10b4:	8c 81       	ldd	r24, Y+4	; 0x04
    10b6:	9d 81       	ldd	r25, Y+5	; 0x05
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	91 05       	cpc	r25, r1
    10bc:	34 f4       	brge	.+12     	; 0x10ca <MDIO_u8PinRead+0x4c>
    10be:	2c 81       	ldd	r18, Y+4	; 0x04
    10c0:	3d 81       	ldd	r19, Y+5	; 0x05
    10c2:	21 15       	cp	r18, r1
    10c4:	31 05       	cpc	r19, r1
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <MDIO_u8PinRead+0x62>
    10c8:	52 c0       	rjmp	.+164    	; 0x116e <MDIO_u8PinRead+0xf0>
    10ca:	4c 81       	ldd	r20, Y+4	; 0x04
    10cc:	5d 81       	ldd	r21, Y+5	; 0x05
    10ce:	42 30       	cpi	r20, 0x02	; 2
    10d0:	51 05       	cpc	r21, r1
    10d2:	51 f1       	breq	.+84     	; 0x1128 <MDIO_u8PinRead+0xaa>
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	91 05       	cpc	r25, r1
    10dc:	b9 f1       	breq	.+110    	; 0x114c <MDIO_u8PinRead+0xce>
    10de:	47 c0       	rjmp	.+142    	; 0x116e <MDIO_u8PinRead+0xf0>
		{
			case PORTA : read = LMTH_GetBit(DIO_PINA_Reg , A_u8Pin) ; break ;
    10e0:	e9 e3       	ldi	r30, 0x39	; 57
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	88 2f       	mov	r24, r24
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a9 01       	movw	r20, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <MDIO_u8PinRead+0x7a>
    10f4:	55 95       	asr	r21
    10f6:	47 95       	ror	r20
    10f8:	8a 95       	dec	r24
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <MDIO_u8PinRead+0x76>
    10fc:	ca 01       	movw	r24, r20
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	35 c0       	rjmp	.+106    	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTB : read = LMTH_GetBit(DIO_PINB_Reg , A_u8Pin) ; break ;
    1104:	e6 e3       	ldi	r30, 0x36	; 54
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <MDIO_u8PinRead+0x9e>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <MDIO_u8PinRead+0x9a>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	23 c0       	rjmp	.+70     	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTC : read = LMTH_GetBit(DIO_PINC_Reg , A_u8Pin) ; break ;
    1128:	e3 e3       	ldi	r30, 0x33	; 51
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <MDIO_u8PinRead+0xc2>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <MDIO_u8PinRead+0xbe>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	11 c0       	rjmp	.+34     	; 0x116e <MDIO_u8PinRead+0xf0>
			case PORTD : read = LMTH_GetBit(DIO_PIND_Reg , A_u8Pin) ; break ;
    114c:	e0 e3       	ldi	r30, 0x30	; 48
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <MDIO_u8PinRead+0xe6>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <MDIO_u8PinRead+0xe2>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
return read ;}
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <HLCD_voidSendCommand>:
#include"../../MCAL/DIO/DIO.h"
#include<util/delay.h>
#include"LCD.h"

void HLCD_voidSendCommand(u8 A_u8Cmd)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	2f 97       	sbiw	r28, 0x0f	; 15
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , LOW) ;
    1196:	82 e0       	ldi	r24, 0x02	; 2
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	40 e0       	ldi	r20, 0x00	; 0
    119c:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN3 , LOW) ;
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	63 e0       	ldi	r22, 0x03	; 3
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPortValue(LCD_DataPort , A_u8Cmd) ;
    11aa:	83 e0       	ldi	r24, 0x03	; 3
    11ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    11ae:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN4 , HIGH) ;
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	64 e0       	ldi	r22, 0x04	; 4
    11b6:	4f ef       	ldi	r20, 0xFF	; 255
    11b8:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e8       	ldi	r26, 0x80	; 128
    11c2:	bf e3       	ldi	r27, 0x3F	; 63
    11c4:	8b 87       	std	Y+11, r24	; 0x0b
    11c6:	9c 87       	std	Y+12, r25	; 0x0c
    11c8:	ad 87       	std	Y+13, r26	; 0x0d
    11ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    11d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	4a ef       	ldi	r20, 0xFA	; 250
    11da:	54 e4       	ldi	r21, 0x44	; 68
    11dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	8f 83       	std	Y+7, r24	; 0x07
    11e6:	98 87       	std	Y+8, r25	; 0x08
    11e8:	a9 87       	std	Y+9, r26	; 0x09
    11ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11ec:	6f 81       	ldd	r22, Y+7	; 0x07
    11ee:	78 85       	ldd	r23, Y+8	; 0x08
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e8       	ldi	r20, 0x80	; 128
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1200:	88 23       	and	r24, r24
    1202:	2c f4       	brge	.+10     	; 0x120e <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
    120c:	3f c0       	rjmp	.+126    	; 0x128c <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    120e:	6f 81       	ldd	r22, Y+7	; 0x07
    1210:	78 85       	ldd	r23, Y+8	; 0x08
    1212:	89 85       	ldd	r24, Y+9	; 0x09
    1214:	9a 85       	ldd	r25, Y+10	; 0x0a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	4f e7       	ldi	r20, 0x7F	; 127
    121c:	57 e4       	ldi	r21, 0x47	; 71
    121e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1222:	18 16       	cp	r1, r24
    1224:	4c f5       	brge	.+82     	; 0x1278 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1226:	6b 85       	ldd	r22, Y+11	; 0x0b
    1228:	7c 85       	ldd	r23, Y+12	; 0x0c
    122a:	8d 85       	ldd	r24, Y+13	; 0x0d
    122c:	9e 85       	ldd	r25, Y+14	; 0x0e
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	51 e4       	ldi	r21, 0x41	; 65
    1236:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	bc 01       	movw	r22, r24
    1240:	cd 01       	movw	r24, r26
    1242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
    124e:	0f c0       	rjmp	.+30     	; 0x126e <HLCD_voidSendCommand+0xee>
    1250:	88 ec       	ldi	r24, 0xC8	; 200
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <HLCD_voidSendCommand+0xdc>
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8d 81       	ldd	r24, Y+5	; 0x05
    1266:	9e 81       	ldd	r25, Y+6	; 0x06
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8d 81       	ldd	r24, Y+5	; 0x05
    1270:	9e 81       	ldd	r25, Y+6	; 0x06
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	69 f7       	brne	.-38     	; 0x1250 <HLCD_voidSendCommand+0xd0>
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6f 81       	ldd	r22, Y+7	; 0x07
    127a:	78 85       	ldd	r23, Y+8	; 0x08
    127c:	89 85       	ldd	r24, Y+9	; 0x09
    127e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1280:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	9a 83       	std	Y+2, r25	; 0x02
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <HLCD_voidSendCommand+0x118>
    129c:	9a 83       	std	Y+2, r25	; 0x02
    129e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidPinValue(LCD_ControlPort , PIN4 , LOW) ;
    12a0:	82 e0       	ldi	r24, 0x02	; 2
    12a2:	64 e0       	ldi	r22, 0x04	; 4
    12a4:	40 e0       	ldi	r20, 0x00	; 0
    12a6:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
}
    12aa:	2f 96       	adiw	r28, 0x0f	; 15
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <HLCD_voidSendData>:

void HLCD_voidSendData(u8 A_u8Data)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	2f 97       	sbiw	r28, 0x0f	; 15
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_voidPinValue(LCD_ControlPort , PIN2 , HIGH) ;
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	4f ef       	ldi	r20, 0xFF	; 255
    12d8:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN3 , LOW) ;
    12dc:	82 e0       	ldi	r24, 0x02	; 2
    12de:	63 e0       	ldi	r22, 0x03	; 3
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPortValue(LCD_DataPort , A_u8Data) ;
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    12ea:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPinValue(LCD_ControlPort , PIN4 , HIGH) ;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	64 e0       	ldi	r22, 0x04	; 4
    12f2:	4f ef       	ldi	r20, 0xFF	; 255
    12f4:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e8       	ldi	r26, 0x80	; 128
    12fe:	bf e3       	ldi	r27, 0x3F	; 63
    1300:	8b 87       	std	Y+11, r24	; 0x0b
    1302:	9c 87       	std	Y+12, r25	; 0x0c
    1304:	ad 87       	std	Y+13, r26	; 0x0d
    1306:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1308:	6b 85       	ldd	r22, Y+11	; 0x0b
    130a:	7c 85       	ldd	r23, Y+12	; 0x0c
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a ef       	ldi	r20, 0xFA	; 250
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8f 83       	std	Y+7, r24	; 0x07
    1322:	98 87       	std	Y+8, r25	; 0x08
    1324:	a9 87       	std	Y+9, r26	; 0x09
    1326:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e8       	ldi	r20, 0x80	; 128
    1336:	5f e3       	ldi	r21, 0x3F	; 63
    1338:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    133c:	88 23       	and	r24, r24
    133e:	2c f4       	brge	.+10     	; 0x134a <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e 83       	std	Y+6, r25	; 0x06
    1346:	8d 83       	std	Y+5, r24	; 0x05
    1348:	3f c0       	rjmp	.+126    	; 0x13c8 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    134a:	6f 81       	ldd	r22, Y+7	; 0x07
    134c:	78 85       	ldd	r23, Y+8	; 0x08
    134e:	89 85       	ldd	r24, Y+9	; 0x09
    1350:	9a 85       	ldd	r25, Y+10	; 0x0a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	3f ef       	ldi	r19, 0xFF	; 255
    1356:	4f e7       	ldi	r20, 0x7F	; 127
    1358:	57 e4       	ldi	r21, 0x47	; 71
    135a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    135e:	18 16       	cp	r1, r24
    1360:	4c f5       	brge	.+82     	; 0x13b4 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1362:	6b 85       	ldd	r22, Y+11	; 0x0b
    1364:	7c 85       	ldd	r23, Y+12	; 0x0c
    1366:	8d 85       	ldd	r24, Y+13	; 0x0d
    1368:	9e 85       	ldd	r25, Y+14	; 0x0e
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	40 e2       	ldi	r20, 0x20	; 32
    1370:	51 e4       	ldi	r21, 0x41	; 65
    1372:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
    138a:	0f c0       	rjmp	.+30     	; 0x13aa <HLCD_voidSendData+0xee>
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9c 83       	std	Y+4, r25	; 0x04
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <HLCD_voidSendData+0xdc>
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	69 f7       	brne	.-38     	; 0x138c <HLCD_voidSendData+0xd0>
    13b2:	14 c0       	rjmp	.+40     	; 0x13dc <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b4:	6f 81       	ldd	r22, Y+7	; 0x07
    13b6:	78 85       	ldd	r23, Y+8	; 0x08
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    13bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	9e 83       	std	Y+6, r25	; 0x06
    13c6:	8d 83       	std	Y+5, r24	; 0x05
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	89 83       	std	Y+1, r24	; 0x01
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <HLCD_voidSendData+0x118>
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	MDIO_voidPinValue(LCD_ControlPort , PIN4 , LOW) ;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
}
    13e6:	2f 96       	adiw	r28, 0x0f	; 15
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <HLCD_voidLcdInit>:


void HLCD_voidLcdInit()
{
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	e8 97       	sbiw	r28, 0x38	; 56
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	f8 94       	cli
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	cd bf       	out	0x3d, r28	; 61
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a0 ef       	ldi	r26, 0xF0	; 240
    1412:	b1 e4       	ldi	r27, 0x41	; 65
    1414:	8d ab       	std	Y+53, r24	; 0x35
    1416:	9e ab       	std	Y+54, r25	; 0x36
    1418:	af ab       	std	Y+55, r26	; 0x37
    141a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141c:	6d a9       	ldd	r22, Y+53	; 0x35
    141e:	7e a9       	ldd	r23, Y+54	; 0x36
    1420:	8f a9       	ldd	r24, Y+55	; 0x37
    1422:	98 ad       	ldd	r25, Y+56	; 0x38
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	4a ef       	ldi	r20, 0xFA	; 250
    142a:	54 e4       	ldi	r21, 0x44	; 68
    142c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	89 ab       	std	Y+49, r24	; 0x31
    1436:	9a ab       	std	Y+50, r25	; 0x32
    1438:	ab ab       	std	Y+51, r26	; 0x33
    143a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    143c:	69 a9       	ldd	r22, Y+49	; 0x31
    143e:	7a a9       	ldd	r23, Y+50	; 0x32
    1440:	8b a9       	ldd	r24, Y+51	; 0x33
    1442:	9c a9       	ldd	r25, Y+52	; 0x34
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e8       	ldi	r20, 0x80	; 128
    144a:	5f e3       	ldi	r21, 0x3F	; 63
    144c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1450:	88 23       	and	r24, r24
    1452:	2c f4       	brge	.+10     	; 0x145e <HLCD_voidLcdInit+0x66>
		__ticks = 1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	98 ab       	std	Y+48, r25	; 0x30
    145a:	8f a7       	std	Y+47, r24	; 0x2f
    145c:	3f c0       	rjmp	.+126    	; 0x14dc <HLCD_voidLcdInit+0xe4>
	else if (__tmp > 65535)
    145e:	69 a9       	ldd	r22, Y+49	; 0x31
    1460:	7a a9       	ldd	r23, Y+50	; 0x32
    1462:	8b a9       	ldd	r24, Y+51	; 0x33
    1464:	9c a9       	ldd	r25, Y+52	; 0x34
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	3f ef       	ldi	r19, 0xFF	; 255
    146a:	4f e7       	ldi	r20, 0x7F	; 127
    146c:	57 e4       	ldi	r21, 0x47	; 71
    146e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1472:	18 16       	cp	r1, r24
    1474:	4c f5       	brge	.+82     	; 0x14c8 <HLCD_voidLcdInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1476:	6d a9       	ldd	r22, Y+53	; 0x35
    1478:	7e a9       	ldd	r23, Y+54	; 0x36
    147a:	8f a9       	ldd	r24, Y+55	; 0x37
    147c:	98 ad       	ldd	r25, Y+56	; 0x38
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e2       	ldi	r20, 0x20	; 32
    1484:	51 e4       	ldi	r21, 0x41	; 65
    1486:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	bc 01       	movw	r22, r24
    1490:	cd 01       	movw	r24, r26
    1492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	98 ab       	std	Y+48, r25	; 0x30
    149c:	8f a7       	std	Y+47, r24	; 0x2f
    149e:	0f c0       	rjmp	.+30     	; 0x14be <HLCD_voidLcdInit+0xc6>
    14a0:	88 ec       	ldi	r24, 0xC8	; 200
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	9e a7       	std	Y+46, r25	; 0x2e
    14a6:	8d a7       	std	Y+45, r24	; 0x2d
    14a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	f1 f7       	brne	.-4      	; 0x14ac <HLCD_voidLcdInit+0xb4>
    14b0:	9e a7       	std	Y+46, r25	; 0x2e
    14b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14b6:	98 a9       	ldd	r25, Y+48	; 0x30
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	98 ab       	std	Y+48, r25	; 0x30
    14bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14be:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c0:	98 a9       	ldd	r25, Y+48	; 0x30
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	69 f7       	brne	.-38     	; 0x14a0 <HLCD_voidLcdInit+0xa8>
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <HLCD_voidLcdInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	69 a9       	ldd	r22, Y+49	; 0x31
    14ca:	7a a9       	ldd	r23, Y+50	; 0x32
    14cc:	8b a9       	ldd	r24, Y+51	; 0x33
    14ce:	9c a9       	ldd	r25, Y+52	; 0x34
    14d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	98 ab       	std	Y+48, r25	; 0x30
    14da:	8f a7       	std	Y+47, r24	; 0x2f
    14dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    14de:	98 a9       	ldd	r25, Y+48	; 0x30
    14e0:	9c a7       	std	Y+44, r25	; 0x2c
    14e2:	8b a7       	std	Y+43, r24	; 0x2b
    14e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <HLCD_voidLcdInit+0xf0>
    14ec:	9c a7       	std	Y+44, r25	; 0x2c
    14ee:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30) ;
	HLCD_voidSendCommand(LCD_FuncSet)  ;
    14f0:	88 e3       	ldi	r24, 0x38	; 56
    14f2:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a0 e8       	ldi	r26, 0x80	; 128
    14fc:	bf e3       	ldi	r27, 0x3F	; 63
    14fe:	8f a3       	std	Y+39, r24	; 0x27
    1500:	98 a7       	std	Y+40, r25	; 0x28
    1502:	a9 a7       	std	Y+41, r26	; 0x29
    1504:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1506:	6f a1       	ldd	r22, Y+39	; 0x27
    1508:	78 a5       	ldd	r23, Y+40	; 0x28
    150a:	89 a5       	ldd	r24, Y+41	; 0x29
    150c:	9a a5       	ldd	r25, Y+42	; 0x2a
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4a ef       	ldi	r20, 0xFA	; 250
    1514:	54 e4       	ldi	r21, 0x44	; 68
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8b a3       	std	Y+35, r24	; 0x23
    1520:	9c a3       	std	Y+36, r25	; 0x24
    1522:	ad a3       	std	Y+37, r26	; 0x25
    1524:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1526:	6b a1       	ldd	r22, Y+35	; 0x23
    1528:	7c a1       	ldd	r23, Y+36	; 0x24
    152a:	8d a1       	ldd	r24, Y+37	; 0x25
    152c:	9e a1       	ldd	r25, Y+38	; 0x26
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <HLCD_voidLcdInit+0x150>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9a a3       	std	Y+34, r25	; 0x22
    1544:	89 a3       	std	Y+33, r24	; 0x21
    1546:	3f c0       	rjmp	.+126    	; 0x15c6 <HLCD_voidLcdInit+0x1ce>
	else if (__tmp > 65535)
    1548:	6b a1       	ldd	r22, Y+35	; 0x23
    154a:	7c a1       	ldd	r23, Y+36	; 0x24
    154c:	8d a1       	ldd	r24, Y+37	; 0x25
    154e:	9e a1       	ldd	r25, Y+38	; 0x26
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	4c f5       	brge	.+82     	; 0x15b2 <HLCD_voidLcdInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	6f a1       	ldd	r22, Y+39	; 0x27
    1562:	78 a5       	ldd	r23, Y+40	; 0x28
    1564:	89 a5       	ldd	r24, Y+41	; 0x29
    1566:	9a a5       	ldd	r25, Y+42	; 0x2a
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9a a3       	std	Y+34, r25	; 0x22
    1586:	89 a3       	std	Y+33, r24	; 0x21
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <HLCD_voidLcdInit+0x1b0>
    158a:	88 ec       	ldi	r24, 0xC8	; 200
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	98 a3       	std	Y+32, r25	; 0x20
    1590:	8f 8f       	std	Y+31, r24	; 0x1f
    1592:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1594:	98 a1       	ldd	r25, Y+32	; 0x20
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <HLCD_voidLcdInit+0x19e>
    159a:	98 a3       	std	Y+32, r25	; 0x20
    159c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	89 a1       	ldd	r24, Y+33	; 0x21
    15a0:	9a a1       	ldd	r25, Y+34	; 0x22
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9a a3       	std	Y+34, r25	; 0x22
    15a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a8:	89 a1       	ldd	r24, Y+33	; 0x21
    15aa:	9a a1       	ldd	r25, Y+34	; 0x22
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	69 f7       	brne	.-38     	; 0x158a <HLCD_voidLcdInit+0x192>
    15b0:	14 c0       	rjmp	.+40     	; 0x15da <HLCD_voidLcdInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b2:	6b a1       	ldd	r22, Y+35	; 0x23
    15b4:	7c a1       	ldd	r23, Y+36	; 0x24
    15b6:	8d a1       	ldd	r24, Y+37	; 0x25
    15b8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9a a3       	std	Y+34, r25	; 0x22
    15c4:	89 a3       	std	Y+33, r24	; 0x21
    15c6:	89 a1       	ldd	r24, Y+33	; 0x21
    15c8:	9a a1       	ldd	r25, Y+34	; 0x22
    15ca:	9e 8f       	std	Y+30, r25	; 0x1e
    15cc:	8d 8f       	std	Y+29, r24	; 0x1d
    15ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <HLCD_voidLcdInit+0x1da>
    15d6:	9e 8f       	std	Y+30, r25	; 0x1e
    15d8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1) ;
	HLCD_voidSendCommand(LCD_DisplayControl) ;
    15da:	8d e0       	ldi	r24, 0x0D	; 13
    15dc:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e8       	ldi	r26, 0x80	; 128
    15e6:	bf e3       	ldi	r27, 0x3F	; 63
    15e8:	89 8f       	std	Y+25, r24	; 0x19
    15ea:	9a 8f       	std	Y+26, r25	; 0x1a
    15ec:	ab 8f       	std	Y+27, r26	; 0x1b
    15ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	69 8d       	ldd	r22, Y+25	; 0x19
    15f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8d 8b       	std	Y+21, r24	; 0x15
    160a:	9e 8b       	std	Y+22, r25	; 0x16
    160c:	af 8b       	std	Y+23, r26	; 0x17
    160e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1610:	6d 89       	ldd	r22, Y+21	; 0x15
    1612:	7e 89       	ldd	r23, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <HLCD_voidLcdInit+0x23a>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <HLCD_voidLcdInit+0x2b8>
	else if (__tmp > 65535)
    1632:	6d 89       	ldd	r22, Y+21	; 0x15
    1634:	7e 89       	ldd	r23, Y+22	; 0x16
    1636:	8f 89       	ldd	r24, Y+23	; 0x17
    1638:	98 8d       	ldd	r25, Y+24	; 0x18
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <HLCD_voidLcdInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	69 8d       	ldd	r22, Y+25	; 0x19
    164c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    164e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <HLCD_voidLcdInit+0x29a>
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9a 8b       	std	Y+18, r25	; 0x12
    167a:	89 8b       	std	Y+17, r24	; 0x11
    167c:	89 89       	ldd	r24, Y+17	; 0x11
    167e:	9a 89       	ldd	r25, Y+18	; 0x12
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <HLCD_voidLcdInit+0x288>
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	8b 89       	ldd	r24, Y+19	; 0x13
    168a:	9c 89       	ldd	r25, Y+20	; 0x14
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9c 8b       	std	Y+20, r25	; 0x14
    1690:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <HLCD_voidLcdInit+0x27c>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <HLCD_voidLcdInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9c 8b       	std	Y+20, r25	; 0x14
    16ae:	8b 8b       	std	Y+19, r24	; 0x13
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	98 8b       	std	Y+16, r25	; 0x10
    16b6:	8f 87       	std	Y+15, r24	; 0x0f
    16b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ba:	98 89       	ldd	r25, Y+16	; 0x10
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <HLCD_voidLcdInit+0x2c4>
    16c0:	98 8b       	std	Y+16, r25	; 0x10
    16c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1) ;
	HLCD_voidSendCommand(LCD_DisplayClear) ;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	a0 e0       	ldi	r26, 0x00	; 0
    16d0:	b0 e4       	ldi	r27, 0x40	; 64
    16d2:	8b 87       	std	Y+11, r24	; 0x0b
    16d4:	9c 87       	std	Y+12, r25	; 0x0c
    16d6:	ad 87       	std	Y+13, r26	; 0x0d
    16d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16da:	6b 85       	ldd	r22, Y+11	; 0x0b
    16dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16de:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	4a ef       	ldi	r20, 0xFA	; 250
    16e8:	54 e4       	ldi	r21, 0x44	; 68
    16ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	8f 83       	std	Y+7, r24	; 0x07
    16f4:	98 87       	std	Y+8, r25	; 0x08
    16f6:	a9 87       	std	Y+9, r26	; 0x09
    16f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e8       	ldi	r20, 0x80	; 128
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170e:	88 23       	and	r24, r24
    1710:	2c f4       	brge	.+10     	; 0x171c <HLCD_voidLcdInit+0x324>
		__ticks = 1;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9e 83       	std	Y+6, r25	; 0x06
    1718:	8d 83       	std	Y+5, r24	; 0x05
    171a:	3f c0       	rjmp	.+126    	; 0x179a <HLCD_voidLcdInit+0x3a2>
	else if (__tmp > 65535)
    171c:	6f 81       	ldd	r22, Y+7	; 0x07
    171e:	78 85       	ldd	r23, Y+8	; 0x08
    1720:	89 85       	ldd	r24, Y+9	; 0x09
    1722:	9a 85       	ldd	r25, Y+10	; 0x0a
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	3f ef       	ldi	r19, 0xFF	; 255
    1728:	4f e7       	ldi	r20, 0x7F	; 127
    172a:	57 e4       	ldi	r21, 0x47	; 71
    172c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1730:	18 16       	cp	r1, r24
    1732:	4c f5       	brge	.+82     	; 0x1786 <HLCD_voidLcdInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1734:	6b 85       	ldd	r22, Y+11	; 0x0b
    1736:	7c 85       	ldd	r23, Y+12	; 0x0c
    1738:	8d 85       	ldd	r24, Y+13	; 0x0d
    173a:	9e 85       	ldd	r25, Y+14	; 0x0e
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e2       	ldi	r20, 0x20	; 32
    1742:	51 e4       	ldi	r21, 0x41	; 65
    1744:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	bc 01       	movw	r22, r24
    174e:	cd 01       	movw	r24, r26
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	0f c0       	rjmp	.+30     	; 0x177c <HLCD_voidLcdInit+0x384>
    175e:	88 ec       	ldi	r24, 0xC8	; 200
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	9c 83       	std	Y+4, r25	; 0x04
    1764:	8b 83       	std	Y+3, r24	; 0x03
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	9c 81       	ldd	r25, Y+4	; 0x04
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <HLCD_voidLcdInit+0x372>
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	9e 83       	std	Y+6, r25	; 0x06
    177a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	69 f7       	brne	.-38     	; 0x175e <HLCD_voidLcdInit+0x366>
    1784:	14 c0       	rjmp	.+40     	; 0x17ae <HLCD_voidLcdInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	9e 83       	std	Y+6, r25	; 0x06
    1798:	8d 83       	std	Y+5, r24	; 0x05
    179a:	8d 81       	ldd	r24, Y+5	; 0x05
    179c:	9e 81       	ldd	r25, Y+6	; 0x06
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <HLCD_voidLcdInit+0x3ae>
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
	HLCD_voidSendCommand(LCD_EntryMode) ;
    17ae:	86 e0       	ldi	r24, 0x06	; 6
    17b0:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    17b4:	e8 96       	adiw	r28, 0x38	; 56
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <HLCD_voidLCDClr>:

void HLCD_voidLCDClr()
{
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	2e 97       	sbiw	r28, 0x0e	; 14
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_DisplayClear) ;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a0 e0       	ldi	r26, 0x00	; 0
    17e6:	b0 e4       	ldi	r27, 0x40	; 64
    17e8:	8b 87       	std	Y+11, r24	; 0x0b
    17ea:	9c 87       	std	Y+12, r25	; 0x0c
    17ec:	ad 87       	std	Y+13, r26	; 0x0d
    17ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a ef       	ldi	r20, 0xFA	; 250
    17fe:	54 e4       	ldi	r21, 0x44	; 68
    1800:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8f 83       	std	Y+7, r24	; 0x07
    180a:	98 87       	std	Y+8, r25	; 0x08
    180c:	a9 87       	std	Y+9, r26	; 0x09
    180e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <HLCD_voidLCDClr+0x6c>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <HLCD_voidLCDClr+0xea>
	else if (__tmp > 65535)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <HLCD_voidLCDClr+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6b 85       	ldd	r22, Y+11	; 0x0b
    184c:	7c 85       	ldd	r23, Y+12	; 0x0c
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <HLCD_voidLCDClr+0xcc>
    1874:	88 ec       	ldi	r24, 0xC8	; 200
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <HLCD_voidLCDClr+0xba>
    1884:	9c 83       	std	Y+4, r25	; 0x04
    1886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <HLCD_voidLCDClr+0xae>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <HLCD_voidLCDClr+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <HLCD_voidLCDClr+0xf6>
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    18c4:	2e 96       	adiw	r28, 0x0e	; 14
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <HLCD_voidSetCursor>:

void HLCD_voidSetCursor(u8 A_u8RowID , u8 A_u8ColIndex)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <HLCD_voidSetCursor+0x6>
    18dc:	00 d0       	rcall	.+0      	; 0x18de <HLCD_voidSetCursor+0x8>
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8RowID)
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3c 83       	std	Y+4, r19	; 0x04
    18ee:	2b 83       	std	Y+3, r18	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	31 f0       	breq	.+12     	; 0x1906 <HLCD_voidSetCursor+0x30>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	31 f0       	breq	.+12     	; 0x1910 <HLCD_voidSetCursor+0x3a>
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <HLCD_voidSetCursor+0x42>
	{
		case LCD_Line1 : HLCD_voidSendCommand(LCD_Row1_ID + A_u8ColIndex) ; break ;
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	81 58       	subi	r24, 0x81	; 129
    190a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <HLCD_voidSetCursor+0x42>
		case LCD_Line2 : HLCD_voidSendCommand(LCD_Row2_ID + A_u8ColIndex) ; break ;
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	81 54       	subi	r24, 0x41	; 65
    1914:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
	}

}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <HLCD_voidSendStr>:

void HLCD_voidSendStr(u8 *PtrStr)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	61 97       	sbiw	r28, 0x11	; 17
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	99 8b       	std	Y+17, r25	; 0x11
    193c:	88 8b       	std	Y+16, r24	; 0x10
	u8 L_u8Counter=0 ;
    193e:	1f 86       	std	Y+15, r1	; 0x0f
    1940:	86 c0       	rjmp	.+268    	; 0x1a4e <HLCD_voidSendStr+0x128>
	while(*PtrStr >0)
		{
			L_u8Counter++ ;
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	8f 5f       	subi	r24, 0xFF	; 255
    1946:	8f 87       	std	Y+15, r24	; 0x0f
			HLCD_voidSendData(*PtrStr ++) ;
    1948:	e8 89       	ldd	r30, Y+16	; 0x10
    194a:	f9 89       	ldd	r31, Y+17	; 0x11
    194c:	20 81       	ld	r18, Z
    194e:	88 89       	ldd	r24, Y+16	; 0x10
    1950:	99 89       	ldd	r25, Y+17	; 0x11
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	99 8b       	std	Y+17, r25	; 0x11
    1956:	88 8b       	std	Y+16, r24	; 0x10
    1958:	82 2f       	mov	r24, r18
    195a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a8 e4       	ldi	r26, 0x48	; 72
    1964:	b2 e4       	ldi	r27, 0x42	; 66
    1966:	8b 87       	std	Y+11, r24	; 0x0b
    1968:	9c 87       	std	Y+12, r25	; 0x0c
    196a:	ad 87       	std	Y+13, r26	; 0x0d
    196c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1970:	7c 85       	ldd	r23, Y+12	; 0x0c
    1972:	8d 85       	ldd	r24, Y+13	; 0x0d
    1974:	9e 85       	ldd	r25, Y+14	; 0x0e
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	4a ef       	ldi	r20, 0xFA	; 250
    197c:	54 e4       	ldi	r21, 0x44	; 68
    197e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	8f 83       	std	Y+7, r24	; 0x07
    1988:	98 87       	std	Y+8, r25	; 0x08
    198a:	a9 87       	std	Y+9, r26	; 0x09
    198c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198e:	6f 81       	ldd	r22, Y+7	; 0x07
    1990:	78 85       	ldd	r23, Y+8	; 0x08
    1992:	89 85       	ldd	r24, Y+9	; 0x09
    1994:	9a 85       	ldd	r25, Y+10	; 0x0a
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	40 e8       	ldi	r20, 0x80	; 128
    199c:	5f e3       	ldi	r21, 0x3F	; 63
    199e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19a2:	88 23       	and	r24, r24
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <HLCD_voidSendStr+0x8a>
		__ticks = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	8d 83       	std	Y+5, r24	; 0x05
    19ae:	3f c0       	rjmp	.+126    	; 0x1a2e <HLCD_voidSendStr+0x108>
	else if (__tmp > 65535)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	3f ef       	ldi	r19, 0xFF	; 255
    19bc:	4f e7       	ldi	r20, 0x7F	; 127
    19be:	57 e4       	ldi	r21, 0x47	; 71
    19c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19c4:	18 16       	cp	r1, r24
    19c6:	4c f5       	brge	.+82     	; 0x1a1a <HLCD_voidSendStr+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	bc 01       	movw	r22, r24
    19e2:	cd 01       	movw	r24, r26
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
    19f0:	0f c0       	rjmp	.+30     	; 0x1a10 <HLCD_voidSendStr+0xea>
    19f2:	88 ec       	ldi	r24, 0xC8	; 200
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	9c 81       	ldd	r25, Y+4	; 0x04
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <HLCD_voidSendStr+0xd8>
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a06:	8d 81       	ldd	r24, Y+5	; 0x05
    1a08:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	00 97       	sbiw	r24, 0x00	; 0
    1a16:	69 f7       	brne	.-38     	; 0x19f2 <HLCD_voidSendStr+0xcc>
    1a18:	14 c0       	rjmp	.+40     	; 0x1a42 <HLCD_voidSendStr+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a1c:	78 85       	ldd	r23, Y+8	; 0x08
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	9e 83       	std	Y+6, r25	; 0x06
    1a2c:	8d 83       	std	Y+5, r24	; 0x05
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	9a 83       	std	Y+2, r25	; 0x02
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <HLCD_voidSendStr+0x114>
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50) ;
			if(L_u8Counter == 16)
    1a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a44:	80 31       	cpi	r24, 0x10	; 16
    1a46:	19 f4       	brne	.+6      	; 0x1a4e <HLCD_voidSendStr+0x128>
			{
				HLCD_voidSendCommand(LCD_EntryModeShift)  ;
    1a48:	87 e0       	ldi	r24, 0x07	; 7
    1a4a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}

void HLCD_voidSendStr(u8 *PtrStr)
{
	u8 L_u8Counter=0 ;
	while(*PtrStr >0)
    1a4e:	e8 89       	ldd	r30, Y+16	; 0x10
    1a50:	f9 89       	ldd	r31, Y+17	; 0x11
    1a52:	80 81       	ld	r24, Z
    1a54:	88 23       	and	r24, r24
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <HLCD_voidSendStr+0x134>
    1a58:	74 cf       	rjmp	.-280    	; 0x1942 <HLCD_voidSendStr+0x1c>
			if(L_u8Counter == 16)
			{
				HLCD_voidSendCommand(LCD_EntryModeShift)  ;
			}
		}
	HLCD_voidSendCommand(LCD_EntryMode)  ;
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    1a60:	61 96       	adiw	r28, 0x11	; 17
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	cf 91       	pop	r28
    1a6e:	df 91       	pop	r29
    1a70:	08 95       	ret

00001a72 <HLCD_voidDisplayNum>:

void HLCD_voidDisplayNum(s32 A_s32Num)
{
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	28 97       	sbiw	r28, 0x08	; 8
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	f8 94       	cli
    1a88:	de bf       	out	0x3e, r29	; 62
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	6d 83       	std	Y+5, r22	; 0x05
    1a90:	7e 83       	std	Y+6, r23	; 0x06
    1a92:	8f 83       	std	Y+7, r24	; 0x07
    1a94:	98 87       	std	Y+8, r25	; 0x08
	s32 L_u32Store = 1 ;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	ab 83       	std	Y+3, r26	; 0x03
    1aa4:	bc 83       	std	Y+4, r27	; 0x04
	if(A_s32Num == 0)
    1aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aaa:	af 81       	ldd	r26, Y+7	; 0x07
    1aac:	b8 85       	ldd	r27, Y+8	; 0x08
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	a1 05       	cpc	r26, r1
    1ab2:	b1 05       	cpc	r27, r1
    1ab4:	19 f4       	brne	.+6      	; 0x1abc <HLCD_voidDisplayNum+0x4a>
	{
		HLCD_voidSendData('0') ;
    1ab6:	80 e3       	ldi	r24, 0x30	; 48
    1ab8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
	}
	if(A_s32Num < 0)
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac0:	af 81       	ldd	r26, Y+7	; 0x07
    1ac2:	b8 85       	ldd	r27, Y+8	; 0x08
    1ac4:	bb 23       	and	r27, r27
    1ac6:	0c f0       	brlt	.+2      	; 0x1aca <HLCD_voidDisplayNum+0x58>
    1ac8:	49 c0       	rjmp	.+146    	; 0x1b5c <HLCD_voidDisplayNum+0xea>
	{

		HLCD_voidSendData('-') ;
    1aca:	8d e2       	ldi	r24, 0x2D	; 45
    1acc:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		A_s32Num = A_s32Num * -1 ;
    1ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad4:	af 81       	ldd	r26, Y+7	; 0x07
    1ad6:	b8 85       	ldd	r27, Y+8	; 0x08
    1ad8:	b0 95       	com	r27
    1ada:	a0 95       	com	r26
    1adc:	90 95       	com	r25
    1ade:	81 95       	neg	r24
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	af 4f       	sbci	r26, 0xFF	; 255
    1ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae6:	8d 83       	std	Y+5, r24	; 0x05
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	af 83       	std	Y+7, r26	; 0x07
    1aec:	b8 87       	std	Y+8, r27	; 0x08
    1aee:	36 c0       	rjmp	.+108    	; 0x1b5c <HLCD_voidDisplayNum+0xea>
	}
	while(A_s32Num != 0)
	{
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	ab 81       	ldd	r26, Y+3	; 0x03
    1af6:	bc 81       	ldd	r27, Y+4	; 0x04
    1af8:	2a e0       	ldi	r18, 0x0A	; 10
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e0       	ldi	r20, 0x00	; 0
    1afe:	50 e0       	ldi	r21, 0x00	; 0
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <__mulsi3>
    1b08:	7b 01       	movw	r14, r22
    1b0a:	8c 01       	movw	r16, r24
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	af 81       	ldd	r26, Y+7	; 0x07
    1b12:	b8 85       	ldd	r27, Y+8	; 0x08
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	cd 01       	movw	r24, r26
    1b20:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divmodsi4>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8e 0d       	add	r24, r14
    1b2a:	9f 1d       	adc	r25, r15
    1b2c:	a0 1f       	adc	r26, r16
    1b2e:	b1 1f       	adc	r27, r17
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	9a 83       	std	Y+2, r25	; 0x02
    1b34:	ab 83       	std	Y+3, r26	; 0x03
    1b36:	bc 83       	std	Y+4, r27	; 0x04
		A_s32Num = A_s32Num/10 ;
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	af 81       	ldd	r26, Y+7	; 0x07
    1b3e:	b8 85       	ldd	r27, Y+8	; 0x08
    1b40:	2a e0       	ldi	r18, 0x0A	; 10
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	50 e0       	ldi	r21, 0x00	; 0
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divmodsi4>
    1b50:	da 01       	movw	r26, r20
    1b52:	c9 01       	movw	r24, r18
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	9e 83       	std	Y+6, r25	; 0x06
    1b58:	af 83       	std	Y+7, r26	; 0x07
    1b5a:	b8 87       	std	Y+8, r27	; 0x08
	{

		HLCD_voidSendData('-') ;
		A_s32Num = A_s32Num * -1 ;
	}
	while(A_s32Num != 0)
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	af 81       	ldd	r26, Y+7	; 0x07
    1b62:	b8 85       	ldd	r27, Y+8	; 0x08
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	a1 05       	cpc	r26, r1
    1b68:	b1 05       	cpc	r27, r1
    1b6a:	11 f6       	brne	.-124    	; 0x1af0 <HLCD_voidDisplayNum+0x7e>
    1b6c:	23 c0       	rjmp	.+70     	; 0x1bb4 <HLCD_voidDisplayNum+0x142>
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
		A_s32Num = A_s32Num/10 ;
	}
	while(L_u32Store != 1)
	{
		HLCD_voidSendData((L_u32Store%10) + 48) ;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	ab 81       	ldd	r26, Y+3	; 0x03
    1b74:	bc 81       	ldd	r27, Y+4	; 0x04
    1b76:	2a e0       	ldi	r18, 0x0A	; 10
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divmodsi4>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	80 5d       	subi	r24, 0xD0	; 208
    1b8c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
		L_u32Store = L_u32Store/10 ;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	9a 81       	ldd	r25, Y+2	; 0x02
    1b94:	ab 81       	ldd	r26, Y+3	; 0x03
    1b96:	bc 81       	ldd	r27, Y+4	; 0x04
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 1b 13 	call	0x2636	; 0x2636 <__divmodsi4>
    1ba8:	da 01       	movw	r26, r20
    1baa:	c9 01       	movw	r24, r18
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	ab 83       	std	Y+3, r26	; 0x03
    1bb2:	bc 83       	std	Y+4, r27	; 0x04
	while(A_s32Num != 0)
	{
		L_u32Store = (L_u32Store*10) + (A_s32Num%10) ;
		A_s32Num = A_s32Num/10 ;
	}
	while(L_u32Store != 1)
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb8:	ab 81       	ldd	r26, Y+3	; 0x03
    1bba:	bc 81       	ldd	r27, Y+4	; 0x04
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	a1 05       	cpc	r26, r1
    1bc2:	b1 05       	cpc	r27, r1
    1bc4:	a1 f6       	brne	.-88     	; 0x1b6e <HLCD_voidDisplayNum+0xfc>
	{
		HLCD_voidSendData((L_u32Store%10) + 48) ;
		L_u32Store = L_u32Store/10 ;
	}
}
    1bc6:	28 96       	adiw	r28, 0x08	; 8
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	08 95       	ret

00001be0 <HLCD_voidSaveCustomChar>:

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex , u8 *A_u8Char)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <HLCD_voidSaveCustomChar+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <HLCD_voidSaveCustomChar+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8a 83       	std	Y+2, r24	; 0x02
    1bee:	7c 83       	std	Y+4, r23	; 0x04
    1bf0:	6b 83       	std	Y+3, r22	; 0x03
	HLCD_voidSendCommand(0x40+(A_u8CGRAMIndex*8)) ;
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	08 96       	adiw	r24, 0x08	; 8
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
	for(u8 L_u8Location = 0 ; L_u8Location < 8 ; L_u8Location++)
    1c0a:	19 82       	std	Y+1, r1	; 0x01
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <HLCD_voidSaveCustomChar+0x4a>
	{
	HLCD_voidSendData(A_u8Char[L_u8Location]) ;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	9c 81       	ldd	r25, Y+4	; 0x04
    1c18:	fc 01       	movw	r30, r24
    1c1a:	e2 0f       	add	r30, r18
    1c1c:	f3 1f       	adc	r31, r19
    1c1e:	80 81       	ld	r24, Z
    1c20:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
}

void HLCD_voidSaveCustomChar(u8 A_u8CGRAMIndex , u8 *A_u8Char)
{
	HLCD_voidSendCommand(0x40+(A_u8CGRAMIndex*8)) ;
	for(u8 L_u8Location = 0 ; L_u8Location < 8 ; L_u8Location++)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	8f 5f       	subi	r24, 0xFF	; 255
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	88 30       	cpi	r24, 0x08	; 8
    1c2e:	78 f3       	brcs	.-34     	; 0x1c0e <HLCD_voidSaveCustomChar+0x2e>
	{
	HLCD_voidSendData(A_u8Char[L_u8Location]) ;
	}
	HLCD_voidSendCommand(0x80) ;
    1c30:	80 e8       	ldi	r24, 0x80	; 128
    1c32:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <HLCD_voidDisplayCustomChar>:

void HLCD_voidDisplayCustomChar(u8 A_u8CGRAMIndex)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	if(A_u8CGRAMIndex <8)
    1c50:	89 81       	ldd	r24, Y+1	; 0x01
    1c52:	88 30       	cpi	r24, 0x08	; 8
    1c54:	18 f4       	brcc	.+6      	; 0x1c5c <HLCD_voidDisplayCustomChar+0x18>
	{
	HLCD_voidSendData(A_u8CGRAMIndex) ;
    1c56:	89 81       	ldd	r24, Y+1	; 0x01
    1c58:	0e 94 5e 09 	call	0x12bc	; 0x12bc <HLCD_voidSendData>
	}
}
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <HLCD_voidRtrnHome>:

void HLCD_voidRtrnHome()
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
	HLCD_voidSendCommand(LCD_RtrnHome) ;
    1c78:	82 e0       	ldi	r24, 0x02	; 2
    1c7a:	0e 94 c0 08 	call	0x1180	; 0x1180 <HLCD_voidSendCommand>
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e4       	ldi	r27, 0x40	; 64
    1c86:	8b 87       	std	Y+11, r24	; 0x0b
    1c88:	9c 87       	std	Y+12, r25	; 0x0c
    1c8a:	ad 87       	std	Y+13, r26	; 0x0d
    1c8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	4a ef       	ldi	r20, 0xFA	; 250
    1c9c:	54 e4       	ldi	r21, 0x44	; 68
    1c9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	8f 83       	std	Y+7, r24	; 0x07
    1ca8:	98 87       	std	Y+8, r25	; 0x08
    1caa:	a9 87       	std	Y+9, r26	; 0x09
    1cac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc2:	88 23       	and	r24, r24
    1cc4:	2c f4       	brge	.+10     	; 0x1cd0 <HLCD_voidRtrnHome+0x6c>
		__ticks = 1;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <HLCD_voidRtrnHome+0xea>
	else if (__tmp > 65535)
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	3f ef       	ldi	r19, 0xFF	; 255
    1cdc:	4f e7       	ldi	r20, 0x7F	; 127
    1cde:	57 e4       	ldi	r21, 0x47	; 71
    1ce0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce4:	18 16       	cp	r1, r24
    1ce6:	4c f5       	brge	.+82     	; 0x1d3a <HLCD_voidRtrnHome+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e2       	ldi	r20, 0x20	; 32
    1cf6:	51 e4       	ldi	r21, 0x41	; 65
    1cf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	bc 01       	movw	r22, r24
    1d02:	cd 01       	movw	r24, r26
    1d04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	9e 83       	std	Y+6, r25	; 0x06
    1d0e:	8d 83       	std	Y+5, r24	; 0x05
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <HLCD_voidRtrnHome+0xcc>
    1d12:	88 ec       	ldi	r24, 0xC8	; 200
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 83       	std	Y+4, r25	; 0x04
    1d18:	8b 83       	std	Y+3, r24	; 0x03
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <HLCD_voidRtrnHome+0xba>
    1d22:	9c 83       	std	Y+4, r25	; 0x04
    1d24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	9e 83       	std	Y+6, r25	; 0x06
    1d2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	69 f7       	brne	.-38     	; 0x1d12 <HLCD_voidRtrnHome+0xae>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <HLCD_voidRtrnHome+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	01 97       	sbiw	r24, 0x01	; 1
    1d5c:	f1 f7       	brne	.-4      	; 0x1d5a <HLCD_voidRtrnHome+0xf6>
    1d5e:	9a 83       	std	Y+2, r25	; 0x02
    1d60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2) ;
}
    1d62:	2e 96       	adiw	r28, 0x0e	; 14
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <main>:
#include "../LIB/BIT_MATH.h"
#include "../HAL/LCD/LCD.h"
#include"../MCAL/DIO/DIO.h"

void main()
{
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	ce 55       	subi	r28, 0x5E	; 94
    1d82:	d0 40       	sbci	r29, 0x00	; 0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
	#define LDMTRX_Row  8
	#define LDMTRX_Col  8

	MDIO_voidPinMode(PORTC , PIN2 , OUTPUT);
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	4f ef       	ldi	r20, 0xFF	; 255
    1d94:	0e 94 23 06 	call	0xc46	; 0xc46 <MDIO_voidPinMode>
	MDIO_voidPinMode(PORTC , PIN3 , OUTPUT);
    1d98:	82 e0       	ldi	r24, 0x02	; 2
    1d9a:	63 e0       	ldi	r22, 0x03	; 3
    1d9c:	4f ef       	ldi	r20, 0xFF	; 255
    1d9e:	0e 94 23 06 	call	0xc46	; 0xc46 <MDIO_voidPinMode>
	MDIO_voidPinMode(PORTC , PIN4 , OUTPUT);
    1da2:	82 e0       	ldi	r24, 0x02	; 2
    1da4:	64 e0       	ldi	r22, 0x04	; 4
    1da6:	4f ef       	ldi	r20, 0xFF	; 255
    1da8:	0e 94 23 06 	call	0xc46	; 0xc46 <MDIO_voidPinMode>
	MDIO_voidPortMode(PORTD , OUTPUT) ;
    1dac:	83 e0       	ldi	r24, 0x03	; 3
    1dae:	6f ef       	ldi	r22, 0xFF	; 255
    1db0:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
	HLCD_voidLcdInit() ;
    1db4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <HLCD_voidLcdInit>
	MDIO_voidPortMode(PORTA , OUTPUT) ;
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	6f ef       	ldi	r22, 0xFF	; 255
    1dbc:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
	MDIO_voidPortMode(PORTB , INPUT)  ;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	60 e0       	ldi	r22, 0x00	; 0
    1dc4:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_voidPortMode>
	MDIO_voidPinMode(PORTC ,PIN0 , INPUT) ;
    1dc8:	82 e0       	ldi	r24, 0x02	; 2
    1dca:	60 e0       	ldi	r22, 0x00	; 0
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	0e 94 23 06 	call	0xc46	; 0xc46 <MDIO_voidPinMode>
	MDIO_voidPinMode(PORTC ,PIN1 , INPUT) ;
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	61 e0       	ldi	r22, 0x01	; 1
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	0e 94 23 06 	call	0xc46	; 0xc46 <MDIO_voidPinMode>
	MDIO_voidPortValue(PORTA , HIGH);
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	6f ef       	ldi	r22, 0xFF	; 255
    1de0:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPortValue(PORTB , HIGH);
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	6f ef       	ldi	r22, 0xFF	; 255
    1de8:	0e 94 df 05 	call	0xbbe	; 0xbbe <MDIO_voidPortValue>
	MDIO_voidPinValue(PORTC ,PIN0 , HIGH) ;
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	4f ef       	ldi	r20, 0xFF	; 255
    1df2:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	MDIO_voidPinValue(PORTC ,PIN1 , HIGH) ;
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	4f ef       	ldi	r20, 0xFF	; 255
    1dfc:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>


	u8 row , col ;
	u8 LDMTRX_Matrix[LDMTRX_Row]={0} ;
    1e00:	ce 01       	movw	r24, r28
    1e02:	89 5a       	subi	r24, 0xA9	; 169
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	28 e0       	ldi	r18, 0x08	; 8
    1e08:	fc 01       	movw	r30, r24
    1e0a:	df 01       	movw	r26, r30
    1e0c:	82 2f       	mov	r24, r18
    1e0e:	1d 92       	st	X+, r1
    1e10:	8a 95       	dec	r24
    1e12:	e9 f7       	brne	.-6      	; 0x1e0e <main+0x9a>

	while(1)
	{
		for(col = 0 ; col < LDMTRX_Col ; col++)
    1e14:	fe 01       	movw	r30, r28
    1e16:	eb 5a       	subi	r30, 0xAB	; 171
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	10 82       	st	Z, r1
    1e1c:	a3 c1       	rjmp	.+838    	; 0x2164 <main+0x3f0>
		{
			MDIO_voidPinValue(PORTA , col , LOW) ;
    1e1e:	fe 01       	movw	r30, r28
    1e20:	eb 5a       	subi	r30, 0xAB	; 171
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	60 81       	ld	r22, Z
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
			for(row = 0 ; row < LDMTRX_Row ; row++)
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ea 5a       	subi	r30, 0xAA	; 170
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	10 82       	st	Z, r1
    1e36:	7e c1       	rjmp	.+764    	; 0x2134 <main+0x3c0>
			{
				if(MDIO_u8PinRead(PORTB , row) == 0)
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ea 5a       	subi	r30, 0xAA	; 170
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	60 81       	ld	r22, Z
    1e42:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    1e46:	88 23       	and	r24, r24
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <main+0xd8>
    1e4a:	6b c1       	rjmp	.+726    	; 0x2122 <main+0x3ae>
				{
					LMTH_ToggleBit(LDMTRX_Matrix[row], col) ;
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ea 5a       	subi	r30, 0xAA	; 170
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 81       	ld	r24, Z
    1e54:	48 2f       	mov	r20, r24
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	fe 01       	movw	r30, r28
    1e5a:	ea 5a       	subi	r30, 0xAA	; 170
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	ce 01       	movw	r24, r28
    1e66:	89 5a       	subi	r24, 0xA9	; 169
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	80 81       	ld	r24, Z
    1e72:	68 2f       	mov	r22, r24
    1e74:	fe 01       	movw	r30, r28
    1e76:	eb 5a       	subi	r30, 0xAB	; 171
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <main+0x116>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	2a 95       	dec	r18
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <main+0x112>
    1e8e:	86 27       	eor	r24, r22
    1e90:	28 2f       	mov	r18, r24
    1e92:	ce 01       	movw	r24, r28
    1e94:	89 5a       	subi	r24, 0xA9	; 169
    1e96:	9f 4f       	sbci	r25, 0xFF	; 255
    1e98:	fc 01       	movw	r30, r24
    1e9a:	e4 0f       	add	r30, r20
    1e9c:	f5 1f       	adc	r31, r21
    1e9e:	20 83       	st	Z, r18
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	ef 5a       	subi	r30, 0xAF	; 175
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a0 ea       	ldi	r26, 0xA0	; 160
    1eac:	b1 e4       	ldi	r27, 0x41	; 65
    1eae:	80 83       	st	Z, r24
    1eb0:	91 83       	std	Z+1, r25	; 0x01
    1eb2:	a2 83       	std	Z+2, r26	; 0x02
    1eb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	8e 01       	movw	r16, r28
    1eb8:	03 5b       	subi	r16, 0xB3	; 179
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ef 5a       	subi	r30, 0xAF	; 175
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	60 81       	ld	r22, Z
    1ec4:	71 81       	ldd	r23, Z+1	; 0x01
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	4a ef       	ldi	r20, 0xFA	; 250
    1ed0:	54 e4       	ldi	r21, 0x44	; 68
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	f8 01       	movw	r30, r16
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e3 5b       	subi	r30, 0xB3	; 179
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	60 81       	ld	r22, Z
    1eec:	71 81       	ldd	r23, Z+1	; 0x01
    1eee:	82 81       	ldd	r24, Z+2	; 0x02
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	44 f4       	brge	.+16     	; 0x1f12 <main+0x19e>
		__ticks = 1;
    1f02:	fe 01       	movw	r30, r28
    1f04:	e5 5b       	subi	r30, 0xB5	; 181
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	80 83       	st	Z, r24
    1f10:	64 c0       	rjmp	.+200    	; 0x1fda <main+0x266>
	else if (__tmp > 65535)
    1f12:	fe 01       	movw	r30, r28
    1f14:	e3 5b       	subi	r30, 0xB3	; 179
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	0c f0       	brlt	.+2      	; 0x1f32 <main+0x1be>
    1f30:	43 c0       	rjmp	.+134    	; 0x1fb8 <main+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	fe 01       	movw	r30, r28
    1f34:	ef 5a       	subi	r30, 0xAF	; 175
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	60 81       	ld	r22, Z
    1f3a:	71 81       	ldd	r23, Z+1	; 0x01
    1f3c:	82 81       	ldd	r24, Z+2	; 0x02
    1f3e:	93 81       	ldd	r25, Z+3	; 0x03
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e2       	ldi	r20, 0x20	; 32
    1f46:	51 e4       	ldi	r21, 0x41	; 65
    1f48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	8e 01       	movw	r16, r28
    1f52:	05 5b       	subi	r16, 0xB5	; 181
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	f8 01       	movw	r30, r16
    1f64:	91 83       	std	Z+1, r25	; 0x01
    1f66:	80 83       	st	Z, r24
    1f68:	1f c0       	rjmp	.+62     	; 0x1fa8 <main+0x234>
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	e7 5b       	subi	r30, 0xB7	; 183
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	88 ec       	ldi	r24, 0xC8	; 200
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 5b       	subi	r30, 0xB7	; 183
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <main+0x20e>
    1f86:	fe 01       	movw	r30, r28
    1f88:	e7 5b       	subi	r30, 0xB7	; 183
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	91 83       	std	Z+1, r25	; 0x01
    1f8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	de 01       	movw	r26, r28
    1f92:	a5 5b       	subi	r26, 0xB5	; 181
    1f94:	bf 4f       	sbci	r27, 0xFF	; 255
    1f96:	fe 01       	movw	r30, r28
    1f98:	e5 5b       	subi	r30, 0xB5	; 181
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	91 81       	ldd	r25, Z+1	; 0x01
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	11 96       	adiw	r26, 0x01	; 1
    1fa4:	9c 93       	st	X, r25
    1fa6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e5 5b       	subi	r30, 0xB5	; 181
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	d1 f6       	brne	.-76     	; 0x1f6a <main+0x1f6>
    1fb6:	27 c0       	rjmp	.+78     	; 0x2006 <main+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	8e 01       	movw	r16, r28
    1fba:	05 5b       	subi	r16, 0xB5	; 181
    1fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e3 5b       	subi	r30, 0xB3	; 179
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	60 81       	ld	r22, Z
    1fc6:	71 81       	ldd	r23, Z+1	; 0x01
    1fc8:	82 81       	ldd	r24, Z+2	; 0x02
    1fca:	93 81       	ldd	r25, Z+3	; 0x03
    1fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	80 83       	st	Z, r24
    1fda:	de 01       	movw	r26, r28
    1fdc:	a9 5b       	subi	r26, 0xB9	; 185
    1fde:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	e5 5b       	subi	r30, 0xB5	; 181
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	91 81       	ldd	r25, Z+1	; 0x01
    1fea:	8d 93       	st	X+, r24
    1fec:	9c 93       	st	X, r25
    1fee:	fe 01       	movw	r30, r28
    1ff0:	e9 5b       	subi	r30, 0xB9	; 185
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <main+0x284>
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e9 5b       	subi	r30, 0xB9	; 185
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
					_delay_ms(20) ;
					while(MDIO_u8PinRead(PORTB , row) == 0){};
    2006:	fe 01       	movw	r30, r28
    2008:	ea 5a       	subi	r30, 0xAA	; 170
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	60 81       	ld	r22, Z
    2010:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    2014:	88 23       	and	r24, r24
    2016:	b9 f3       	breq	.-18     	; 0x2006 <main+0x292>
    2018:	fe 01       	movw	r30, r28
    201a:	ed 5b       	subi	r30, 0xBD	; 189
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a0 ea       	ldi	r26, 0xA0	; 160
    2024:	b1 e4       	ldi	r27, 0x41	; 65
    2026:	80 83       	st	Z, r24
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	a2 83       	std	Z+2, r26	; 0x02
    202c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	8e 01       	movw	r16, r28
    2030:	01 5c       	subi	r16, 0xC1	; 193
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	ed 5b       	subi	r30, 0xBD	; 189
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205c:	fe 01       	movw	r30, r28
    205e:	ff 96       	adiw	r30, 0x3f	; 63
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e8       	ldi	r20, 0x80	; 128
    206e:	5f e3       	ldi	r21, 0x3F	; 63
    2070:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2074:	88 23       	and	r24, r24
    2076:	2c f4       	brge	.+10     	; 0x2082 <main+0x30e>
		__ticks = 1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	9e af       	std	Y+62, r25	; 0x3e
    207e:	8d af       	std	Y+61, r24	; 0x3d
    2080:	46 c0       	rjmp	.+140    	; 0x210e <main+0x39a>
	else if (__tmp > 65535)
    2082:	fe 01       	movw	r30, r28
    2084:	ff 96       	adiw	r30, 0x3f	; 63
    2086:	60 81       	ld	r22, Z
    2088:	71 81       	ldd	r23, Z+1	; 0x01
    208a:	82 81       	ldd	r24, Z+2	; 0x02
    208c:	93 81       	ldd	r25, Z+3	; 0x03
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	64 f5       	brge	.+88     	; 0x20f6 <main+0x382>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 5b       	subi	r30, 0xBD	; 189
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	9e af       	std	Y+62, r25	; 0x3e
    20ca:	8d af       	std	Y+61, r24	; 0x3d
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <main+0x378>
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9c af       	std	Y+60, r25	; 0x3c
    20d4:	8b af       	std	Y+59, r24	; 0x3b
    20d6:	8b ad       	ldd	r24, Y+59	; 0x3b
    20d8:	9c ad       	ldd	r25, Y+60	; 0x3c
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <main+0x366>
    20de:	9c af       	std	Y+60, r25	; 0x3c
    20e0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	9e af       	std	Y+62, r25	; 0x3e
    20ea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f0:	00 97       	sbiw	r24, 0x00	; 0
    20f2:	69 f7       	brne	.-38     	; 0x20ce <main+0x35a>
    20f4:	16 c0       	rjmp	.+44     	; 0x2122 <main+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f6:	fe 01       	movw	r30, r28
    20f8:	ff 96       	adiw	r30, 0x3f	; 63
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9e af       	std	Y+62, r25	; 0x3e
    210c:	8d af       	std	Y+61, r24	; 0x3d
    210e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2110:	9e ad       	ldd	r25, Y+62	; 0x3e
    2112:	9a af       	std	Y+58, r25	; 0x3a
    2114:	89 af       	std	Y+57, r24	; 0x39
    2116:	89 ad       	ldd	r24, Y+57	; 0x39
    2118:	9a ad       	ldd	r25, Y+58	; 0x3a
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <main+0x3a6>
    211e:	9a af       	std	Y+58, r25	; 0x3a
    2120:	89 af       	std	Y+57, r24	; 0x39
	while(1)
	{
		for(col = 0 ; col < LDMTRX_Col ; col++)
		{
			MDIO_voidPinValue(PORTA , col , LOW) ;
			for(row = 0 ; row < LDMTRX_Row ; row++)
    2122:	de 01       	movw	r26, r28
    2124:	aa 5a       	subi	r26, 0xAA	; 170
    2126:	bf 4f       	sbci	r27, 0xFF	; 255
    2128:	fe 01       	movw	r30, r28
    212a:	ea 5a       	subi	r30, 0xAA	; 170
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	8f 5f       	subi	r24, 0xFF	; 255
    2132:	8c 93       	st	X, r24
    2134:	fe 01       	movw	r30, r28
    2136:	ea 5a       	subi	r30, 0xAA	; 170
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	88 30       	cpi	r24, 0x08	; 8
    213e:	08 f4       	brcc	.+2      	; 0x2142 <main+0x3ce>
    2140:	7b ce       	rjmp	.-778    	; 0x1e38 <main+0xc4>
					_delay_ms(20) ;
					while(MDIO_u8PinRead(PORTB , row) == 0){};
					_delay_ms(20) ;
				}
			}
		MDIO_voidPinValue(PORTA , col , HIGH) ;
    2142:	fe 01       	movw	r30, r28
    2144:	eb 5a       	subi	r30, 0xAB	; 171
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	60 81       	ld	r22, Z
    214c:	4f ef       	ldi	r20, 0xFF	; 255
    214e:	0e 94 31 07 	call	0xe62	; 0xe62 <MDIO_voidPinValue>
	u8 row , col ;
	u8 LDMTRX_Matrix[LDMTRX_Row]={0} ;

	while(1)
	{
		for(col = 0 ; col < LDMTRX_Col ; col++)
    2152:	de 01       	movw	r26, r28
    2154:	ab 5a       	subi	r26, 0xAB	; 171
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	eb 5a       	subi	r30, 0xAB	; 171
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	8c 93       	st	X, r24
    2164:	fe 01       	movw	r30, r28
    2166:	eb 5a       	subi	r30, 0xAB	; 171
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	88 30       	cpi	r24, 0x08	; 8
    216e:	08 f4       	brcc	.+2      	; 0x2172 <main+0x3fe>
    2170:	56 ce       	rjmp	.-852    	; 0x1e1e <main+0xaa>
				}
			}
		MDIO_voidPinValue(PORTA , col , HIGH) ;
		}
		//clear character
		if(MDIO_u8PinRead(PORTC ,PIN0) == 0)
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    217a:	88 23       	and	r24, r24
    217c:	09 f0       	breq	.+2      	; 0x2180 <main+0x40c>
    217e:	40 c1       	rjmp	.+640    	; 0x2400 <main+0x68c>
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 ea       	ldi	r26, 0xA0	; 160
    2186:	b1 e4       	ldi	r27, 0x41	; 65
    2188:	8d ab       	std	Y+53, r24	; 0x35
    218a:	9e ab       	std	Y+54, r25	; 0x36
    218c:	af ab       	std	Y+55, r26	; 0x37
    218e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	6d a9       	ldd	r22, Y+53	; 0x35
    2192:	7e a9       	ldd	r23, Y+54	; 0x36
    2194:	8f a9       	ldd	r24, Y+55	; 0x37
    2196:	98 ad       	ldd	r25, Y+56	; 0x38
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	89 ab       	std	Y+49, r24	; 0x31
    21aa:	9a ab       	std	Y+50, r25	; 0x32
    21ac:	ab ab       	std	Y+51, r26	; 0x33
    21ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21b0:	69 a9       	ldd	r22, Y+49	; 0x31
    21b2:	7a a9       	ldd	r23, Y+50	; 0x32
    21b4:	8b a9       	ldd	r24, Y+51	; 0x33
    21b6:	9c a9       	ldd	r25, Y+52	; 0x34
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <main+0x45e>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	98 ab       	std	Y+48, r25	; 0x30
    21ce:	8f a7       	std	Y+47, r24	; 0x2f
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <main+0x4dc>
	else if (__tmp > 65535)
    21d2:	69 a9       	ldd	r22, Y+49	; 0x31
    21d4:	7a a9       	ldd	r23, Y+50	; 0x32
    21d6:	8b a9       	ldd	r24, Y+51	; 0x33
    21d8:	9c a9       	ldd	r25, Y+52	; 0x34
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <main+0x4c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	6d a9       	ldd	r22, Y+53	; 0x35
    21ec:	7e a9       	ldd	r23, Y+54	; 0x36
    21ee:	8f a9       	ldd	r24, Y+55	; 0x37
    21f0:	98 ad       	ldd	r25, Y+56	; 0x38
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <main+0x4be>
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e a7       	std	Y+46, r25	; 0x2e
    221a:	8d a7       	std	Y+45, r24	; 0x2d
    221c:	8d a5       	ldd	r24, Y+45	; 0x2d
    221e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <main+0x4ac>
    2224:	9e a7       	std	Y+46, r25	; 0x2e
    2226:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8f a5       	ldd	r24, Y+47	; 0x2f
    222a:	98 a9       	ldd	r25, Y+48	; 0x30
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	98 ab       	std	Y+48, r25	; 0x30
    2230:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8f a5       	ldd	r24, Y+47	; 0x2f
    2234:	98 a9       	ldd	r25, Y+48	; 0x30
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <main+0x4a0>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <main+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	69 a9       	ldd	r22, Y+49	; 0x31
    223e:	7a a9       	ldd	r23, Y+50	; 0x32
    2240:	8b a9       	ldd	r24, Y+51	; 0x33
    2242:	9c a9       	ldd	r25, Y+52	; 0x34
    2244:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	98 ab       	std	Y+48, r25	; 0x30
    224e:	8f a7       	std	Y+47, r24	; 0x2f
    2250:	8f a5       	ldd	r24, Y+47	; 0x2f
    2252:	98 a9       	ldd	r25, Y+48	; 0x30
    2254:	9c a7       	std	Y+44, r25	; 0x2c
    2256:	8b a7       	std	Y+43, r24	; 0x2b
    2258:	8b a5       	ldd	r24, Y+43	; 0x2b
    225a:	9c a5       	ldd	r25, Y+44	; 0x2c
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <main+0x4e8>
    2260:	9c a7       	std	Y+44, r25	; 0x2c
    2262:	8b a7       	std	Y+43, r24	; 0x2b
		{
			_delay_ms(20) ;
			while(MDIO_u8PinRead(PORTC , PIN0) == 0){};
    2264:	82 e0       	ldi	r24, 0x02	; 2
    2266:	60 e0       	ldi	r22, 0x00	; 0
    2268:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    226c:	88 23       	and	r24, r24
    226e:	d1 f3       	breq	.-12     	; 0x2264 <main+0x4f0>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 ea       	ldi	r26, 0xA0	; 160
    2276:	b1 e4       	ldi	r27, 0x41	; 65
    2278:	8f a3       	std	Y+39, r24	; 0x27
    227a:	98 a7       	std	Y+40, r25	; 0x28
    227c:	a9 a7       	std	Y+41, r26	; 0x29
    227e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2280:	6f a1       	ldd	r22, Y+39	; 0x27
    2282:	78 a5       	ldd	r23, Y+40	; 0x28
    2284:	89 a5       	ldd	r24, Y+41	; 0x29
    2286:	9a a5       	ldd	r25, Y+42	; 0x2a
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8b a3       	std	Y+35, r24	; 0x23
    229a:	9c a3       	std	Y+36, r25	; 0x24
    229c:	ad a3       	std	Y+37, r26	; 0x25
    229e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a0:	6b a1       	ldd	r22, Y+35	; 0x23
    22a2:	7c a1       	ldd	r23, Y+36	; 0x24
    22a4:	8d a1       	ldd	r24, Y+37	; 0x25
    22a6:	9e a1       	ldd	r25, Y+38	; 0x26
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	2c f4       	brge	.+10     	; 0x22c2 <main+0x54e>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
    22c0:	3f c0       	rjmp	.+126    	; 0x2340 <main+0x5cc>
	else if (__tmp > 65535)
    22c2:	6b a1       	ldd	r22, Y+35	; 0x23
    22c4:	7c a1       	ldd	r23, Y+36	; 0x24
    22c6:	8d a1       	ldd	r24, Y+37	; 0x25
    22c8:	9e a1       	ldd	r25, Y+38	; 0x26
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	3f ef       	ldi	r19, 0xFF	; 255
    22ce:	4f e7       	ldi	r20, 0x7F	; 127
    22d0:	57 e4       	ldi	r21, 0x47	; 71
    22d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22d6:	18 16       	cp	r1, r24
    22d8:	4c f5       	brge	.+82     	; 0x232c <main+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22da:	6f a1       	ldd	r22, Y+39	; 0x27
    22dc:	78 a5       	ldd	r23, Y+40	; 0x28
    22de:	89 a5       	ldd	r24, Y+41	; 0x29
    22e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e2       	ldi	r20, 0x20	; 32
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9a a3       	std	Y+34, r25	; 0x22
    2300:	89 a3       	std	Y+33, r24	; 0x21
    2302:	0f c0       	rjmp	.+30     	; 0x2322 <main+0x5ae>
    2304:	88 ec       	ldi	r24, 0xC8	; 200
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	98 a3       	std	Y+32, r25	; 0x20
    230a:	8f 8f       	std	Y+31, r24	; 0x1f
    230c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    230e:	98 a1       	ldd	r25, Y+32	; 0x20
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <main+0x59c>
    2314:	98 a3       	std	Y+32, r25	; 0x20
    2316:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2318:	89 a1       	ldd	r24, Y+33	; 0x21
    231a:	9a a1       	ldd	r25, Y+34	; 0x22
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	9a a3       	std	Y+34, r25	; 0x22
    2320:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	89 a1       	ldd	r24, Y+33	; 0x21
    2324:	9a a1       	ldd	r25, Y+34	; 0x22
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	69 f7       	brne	.-38     	; 0x2304 <main+0x590>
    232a:	14 c0       	rjmp	.+40     	; 0x2354 <main+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    232c:	6b a1       	ldd	r22, Y+35	; 0x23
    232e:	7c a1       	ldd	r23, Y+36	; 0x24
    2330:	8d a1       	ldd	r24, Y+37	; 0x25
    2332:	9e a1       	ldd	r25, Y+38	; 0x26
    2334:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9a a3       	std	Y+34, r25	; 0x22
    233e:	89 a3       	std	Y+33, r24	; 0x21
    2340:	89 a1       	ldd	r24, Y+33	; 0x21
    2342:	9a a1       	ldd	r25, Y+34	; 0x22
    2344:	9e 8f       	std	Y+30, r25	; 0x1e
    2346:	8d 8f       	std	Y+29, r24	; 0x1d
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <main+0x5d8>
    2350:	9e 8f       	std	Y+30, r25	; 0x1e
    2352:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(20) ;
			for(col = 0 ; col < LDMTRX_Col ; col++)
    2354:	fe 01       	movw	r30, r28
    2356:	eb 5a       	subi	r30, 0xAB	; 171
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	10 82       	st	Z, r1
    235c:	48 c0       	rjmp	.+144    	; 0x23ee <main+0x67a>
			{
				for(row = 0 ; row < LDMTRX_Row ; row++)
    235e:	fe 01       	movw	r30, r28
    2360:	ea 5a       	subi	r30, 0xAA	; 170
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	10 82       	st	Z, r1
    2366:	34 c0       	rjmp	.+104    	; 0x23d0 <main+0x65c>
				{
					LMTH_ClrBit(LDMTRX_Matrix[row] , col);
    2368:	fe 01       	movw	r30, r28
    236a:	ea 5a       	subi	r30, 0xAA	; 170
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	48 2f       	mov	r20, r24
    2372:	50 e0       	ldi	r21, 0x00	; 0
    2374:	fe 01       	movw	r30, r28
    2376:	ea 5a       	subi	r30, 0xAA	; 170
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 81       	ld	r24, Z
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	ce 01       	movw	r24, r28
    2382:	89 5a       	subi	r24, 0xA9	; 169
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	80 81       	ld	r24, Z
    238e:	68 2f       	mov	r22, r24
    2390:	fe 01       	movw	r30, r28
    2392:	eb 5a       	subi	r30, 0xAB	; 171
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	80 81       	ld	r24, Z
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <main+0x632>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	2a 95       	dec	r18
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <main+0x62e>
    23aa:	80 95       	com	r24
    23ac:	86 23       	and	r24, r22
    23ae:	28 2f       	mov	r18, r24
    23b0:	ce 01       	movw	r24, r28
    23b2:	89 5a       	subi	r24, 0xA9	; 169
    23b4:	9f 4f       	sbci	r25, 0xFF	; 255
    23b6:	fc 01       	movw	r30, r24
    23b8:	e4 0f       	add	r30, r20
    23ba:	f5 1f       	adc	r31, r21
    23bc:	20 83       	st	Z, r18
			_delay_ms(20) ;
			while(MDIO_u8PinRead(PORTC , PIN0) == 0){};
			_delay_ms(20) ;
			for(col = 0 ; col < LDMTRX_Col ; col++)
			{
				for(row = 0 ; row < LDMTRX_Row ; row++)
    23be:	de 01       	movw	r26, r28
    23c0:	aa 5a       	subi	r26, 0xAA	; 170
    23c2:	bf 4f       	sbci	r27, 0xFF	; 255
    23c4:	fe 01       	movw	r30, r28
    23c6:	ea 5a       	subi	r30, 0xAA	; 170
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	8c 93       	st	X, r24
    23d0:	fe 01       	movw	r30, r28
    23d2:	ea 5a       	subi	r30, 0xAA	; 170
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	88 30       	cpi	r24, 0x08	; 8
    23da:	30 f2       	brcs	.-116    	; 0x2368 <main+0x5f4>
		if(MDIO_u8PinRead(PORTC ,PIN0) == 0)
		{
			_delay_ms(20) ;
			while(MDIO_u8PinRead(PORTC , PIN0) == 0){};
			_delay_ms(20) ;
			for(col = 0 ; col < LDMTRX_Col ; col++)
    23dc:	de 01       	movw	r26, r28
    23de:	ab 5a       	subi	r26, 0xAB	; 171
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	eb 5a       	subi	r30, 0xAB	; 171
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	8c 93       	st	X, r24
    23ee:	fe 01       	movw	r30, r28
    23f0:	eb 5a       	subi	r30, 0xAB	; 171
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	88 30       	cpi	r24, 0x08	; 8
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <main+0x688>
    23fa:	b1 cf       	rjmp	.-158    	; 0x235e <main+0x5ea>
				for(row = 0 ; row < LDMTRX_Row ; row++)
				{
					LMTH_ClrBit(LDMTRX_Matrix[row] , col);
				}
			}
			HLCD_voidLCDClr() ;
    23fc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <HLCD_voidLCDClr>
		}

		//save character and display
		if(MDIO_u8PinRead(PORTC ,PIN1) == 0)
    2400:	82 e0       	ldi	r24, 0x02	; 2
    2402:	61 e0       	ldi	r22, 0x01	; 1
    2404:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    2408:	88 23       	and	r24, r24
    240a:	09 f0       	breq	.+2      	; 0x240e <main+0x69a>
    240c:	03 cd       	rjmp	.-1530   	; 0x1e14 <main+0xa0>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 ea       	ldi	r26, 0xA0	; 160
    2414:	b1 e4       	ldi	r27, 0x41	; 65
    2416:	89 8f       	std	Y+25, r24	; 0x19
    2418:	9a 8f       	std	Y+26, r25	; 0x1a
    241a:	ab 8f       	std	Y+27, r26	; 0x1b
    241c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241e:	69 8d       	ldd	r22, Y+25	; 0x19
    2420:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2422:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2424:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	4a ef       	ldi	r20, 0xFA	; 250
    242c:	54 e4       	ldi	r21, 0x44	; 68
    242e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	8d 8b       	std	Y+21, r24	; 0x15
    2438:	9e 8b       	std	Y+22, r25	; 0x16
    243a:	af 8b       	std	Y+23, r26	; 0x17
    243c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e8       	ldi	r20, 0x80	; 128
    244c:	5f e3       	ldi	r21, 0x3F	; 63
    244e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2452:	88 23       	and	r24, r24
    2454:	2c f4       	brge	.+10     	; 0x2460 <main+0x6ec>
		__ticks = 1;
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	3f c0       	rjmp	.+126    	; 0x24de <main+0x76a>
	else if (__tmp > 65535)
    2460:	6d 89       	ldd	r22, Y+21	; 0x15
    2462:	7e 89       	ldd	r23, Y+22	; 0x16
    2464:	8f 89       	ldd	r24, Y+23	; 0x17
    2466:	98 8d       	ldd	r25, Y+24	; 0x18
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	3f ef       	ldi	r19, 0xFF	; 255
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	57 e4       	ldi	r21, 0x47	; 71
    2470:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	4c f5       	brge	.+82     	; 0x24ca <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2478:	69 8d       	ldd	r22, Y+25	; 0x19
    247a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e2       	ldi	r20, 0x20	; 32
    2486:	51 e4       	ldi	r21, 0x41	; 65
    2488:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	bc 01       	movw	r22, r24
    2492:	cd 01       	movw	r24, r26
    2494:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	9c 8b       	std	Y+20, r25	; 0x14
    249e:	8b 8b       	std	Y+19, r24	; 0x13
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <main+0x74c>
    24a2:	88 ec       	ldi	r24, 0xC8	; 200
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9a 8b       	std	Y+18, r25	; 0x12
    24a8:	89 8b       	std	Y+17, r24	; 0x11
    24aa:	89 89       	ldd	r24, Y+17	; 0x11
    24ac:	9a 89       	ldd	r25, Y+18	; 0x12
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <main+0x73a>
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b6:	8b 89       	ldd	r24, Y+19	; 0x13
    24b8:	9c 89       	ldd	r25, Y+20	; 0x14
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	9c 8b       	std	Y+20, r25	; 0x14
    24be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c0:	8b 89       	ldd	r24, Y+19	; 0x13
    24c2:	9c 89       	ldd	r25, Y+20	; 0x14
    24c4:	00 97       	sbiw	r24, 0x00	; 0
    24c6:	69 f7       	brne	.-38     	; 0x24a2 <main+0x72e>
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <main+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	9c 8b       	std	Y+20, r25	; 0x14
    24dc:	8b 8b       	std	Y+19, r24	; 0x13
    24de:	8b 89       	ldd	r24, Y+19	; 0x13
    24e0:	9c 89       	ldd	r25, Y+20	; 0x14
    24e2:	98 8b       	std	Y+16, r25	; 0x10
    24e4:	8f 87       	std	Y+15, r24	; 0x0f
    24e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e8:	98 89       	ldd	r25, Y+16	; 0x10
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <main+0x776>
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(20) ;
			while(MDIO_u8PinRead(PORTC , PIN1) == 0){};
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	61 e0       	ldi	r22, 0x01	; 1
    24f6:	0e 94 3f 08 	call	0x107e	; 0x107e <MDIO_u8PinRead>
    24fa:	88 23       	and	r24, r24
    24fc:	d1 f3       	breq	.-12     	; 0x24f2 <main+0x77e>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 ea       	ldi	r26, 0xA0	; 160
    2504:	b1 e4       	ldi	r27, 0x41	; 65
    2506:	8b 87       	std	Y+11, r24	; 0x0b
    2508:	9c 87       	std	Y+12, r25	; 0x0c
    250a:	ad 87       	std	Y+13, r26	; 0x0d
    250c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2510:	7c 85       	ldd	r23, Y+12	; 0x0c
    2512:	8d 85       	ldd	r24, Y+13	; 0x0d
    2514:	9e 85       	ldd	r25, Y+14	; 0x0e
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a ef       	ldi	r20, 0xFA	; 250
    251c:	54 e4       	ldi	r21, 0x44	; 68
    251e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	8f 83       	std	Y+7, r24	; 0x07
    2528:	98 87       	std	Y+8, r25	; 0x08
    252a:	a9 87       	std	Y+9, r26	; 0x09
    252c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    252e:	6f 81       	ldd	r22, Y+7	; 0x07
    2530:	78 85       	ldd	r23, Y+8	; 0x08
    2532:	89 85       	ldd	r24, Y+9	; 0x09
    2534:	9a 85       	ldd	r25, Y+10	; 0x0a
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <main+0x7dc>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <main+0x85a>
	else if (__tmp > 65535)
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <main+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6b 85       	ldd	r22, Y+11	; 0x0b
    256a:	7c 85       	ldd	r23, Y+12	; 0x0c
    256c:	8d 85       	ldd	r24, Y+13	; 0x0d
    256e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <main+0x83c>
    2592:	88 ec       	ldi	r24, 0xC8	; 200
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 83       	std	Y+4, r25	; 0x04
    2598:	8b 83       	std	Y+3, r24	; 0x03
    259a:	8b 81       	ldd	r24, Y+3	; 0x03
    259c:	9c 81       	ldd	r25, Y+4	; 0x04
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <main+0x82a>
    25a2:	9c 83       	std	Y+4, r25	; 0x04
    25a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8d 81       	ldd	r24, Y+5	; 0x05
    25a8:	9e 81       	ldd	r25, Y+6	; 0x06
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	9e 83       	std	Y+6, r25	; 0x06
    25ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <main+0x81e>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <main+0x86e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	6f 81       	ldd	r22, Y+7	; 0x07
    25bc:	78 85       	ldd	r23, Y+8	; 0x08
    25be:	89 85       	ldd	r24, Y+9	; 0x09
    25c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	8d 81       	ldd	r24, Y+5	; 0x05
    25d0:	9e 81       	ldd	r25, Y+6	; 0x06
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <main+0x866>
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20) ;
			HLCD_voidSaveCustomChar(1,LDMTRX_Matrix) ;
    25e2:	9e 01       	movw	r18, r28
    25e4:	29 5a       	subi	r18, 0xA9	; 169
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	b9 01       	movw	r22, r18
    25ec:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <HLCD_voidSaveCustomChar>
			HLCD_voidDisplayCustomChar(1) ;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <HLCD_voidDisplayCustomChar>
    25f6:	0e cc       	rjmp	.-2020   	; 0x1e14 <main+0xa0>

000025f8 <__mulsi3>:
    25f8:	62 9f       	mul	r22, r18
    25fa:	d0 01       	movw	r26, r0
    25fc:	73 9f       	mul	r23, r19
    25fe:	f0 01       	movw	r30, r0
    2600:	82 9f       	mul	r24, r18
    2602:	e0 0d       	add	r30, r0
    2604:	f1 1d       	adc	r31, r1
    2606:	64 9f       	mul	r22, r20
    2608:	e0 0d       	add	r30, r0
    260a:	f1 1d       	adc	r31, r1
    260c:	92 9f       	mul	r25, r18
    260e:	f0 0d       	add	r31, r0
    2610:	83 9f       	mul	r24, r19
    2612:	f0 0d       	add	r31, r0
    2614:	74 9f       	mul	r23, r20
    2616:	f0 0d       	add	r31, r0
    2618:	65 9f       	mul	r22, r21
    261a:	f0 0d       	add	r31, r0
    261c:	99 27       	eor	r25, r25
    261e:	72 9f       	mul	r23, r18
    2620:	b0 0d       	add	r27, r0
    2622:	e1 1d       	adc	r30, r1
    2624:	f9 1f       	adc	r31, r25
    2626:	63 9f       	mul	r22, r19
    2628:	b0 0d       	add	r27, r0
    262a:	e1 1d       	adc	r30, r1
    262c:	f9 1f       	adc	r31, r25
    262e:	bd 01       	movw	r22, r26
    2630:	cf 01       	movw	r24, r30
    2632:	11 24       	eor	r1, r1
    2634:	08 95       	ret

00002636 <__divmodsi4>:
    2636:	97 fb       	bst	r25, 7
    2638:	09 2e       	mov	r0, r25
    263a:	05 26       	eor	r0, r21
    263c:	0e d0       	rcall	.+28     	; 0x265a <__divmodsi4_neg1>
    263e:	57 fd       	sbrc	r21, 7
    2640:	04 d0       	rcall	.+8      	; 0x264a <__divmodsi4_neg2>
    2642:	14 d0       	rcall	.+40     	; 0x266c <__udivmodsi4>
    2644:	0a d0       	rcall	.+20     	; 0x265a <__divmodsi4_neg1>
    2646:	00 1c       	adc	r0, r0
    2648:	38 f4       	brcc	.+14     	; 0x2658 <__divmodsi4_exit>

0000264a <__divmodsi4_neg2>:
    264a:	50 95       	com	r21
    264c:	40 95       	com	r20
    264e:	30 95       	com	r19
    2650:	21 95       	neg	r18
    2652:	3f 4f       	sbci	r19, 0xFF	; 255
    2654:	4f 4f       	sbci	r20, 0xFF	; 255
    2656:	5f 4f       	sbci	r21, 0xFF	; 255

00002658 <__divmodsi4_exit>:
    2658:	08 95       	ret

0000265a <__divmodsi4_neg1>:
    265a:	f6 f7       	brtc	.-4      	; 0x2658 <__divmodsi4_exit>
    265c:	90 95       	com	r25
    265e:	80 95       	com	r24
    2660:	70 95       	com	r23
    2662:	61 95       	neg	r22
    2664:	7f 4f       	sbci	r23, 0xFF	; 255
    2666:	8f 4f       	sbci	r24, 0xFF	; 255
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	08 95       	ret

0000266c <__udivmodsi4>:
    266c:	a1 e2       	ldi	r26, 0x21	; 33
    266e:	1a 2e       	mov	r1, r26
    2670:	aa 1b       	sub	r26, r26
    2672:	bb 1b       	sub	r27, r27
    2674:	fd 01       	movw	r30, r26
    2676:	0d c0       	rjmp	.+26     	; 0x2692 <__udivmodsi4_ep>

00002678 <__udivmodsi4_loop>:
    2678:	aa 1f       	adc	r26, r26
    267a:	bb 1f       	adc	r27, r27
    267c:	ee 1f       	adc	r30, r30
    267e:	ff 1f       	adc	r31, r31
    2680:	a2 17       	cp	r26, r18
    2682:	b3 07       	cpc	r27, r19
    2684:	e4 07       	cpc	r30, r20
    2686:	f5 07       	cpc	r31, r21
    2688:	20 f0       	brcs	.+8      	; 0x2692 <__udivmodsi4_ep>
    268a:	a2 1b       	sub	r26, r18
    268c:	b3 0b       	sbc	r27, r19
    268e:	e4 0b       	sbc	r30, r20
    2690:	f5 0b       	sbc	r31, r21

00002692 <__udivmodsi4_ep>:
    2692:	66 1f       	adc	r22, r22
    2694:	77 1f       	adc	r23, r23
    2696:	88 1f       	adc	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	1a 94       	dec	r1
    269c:	69 f7       	brne	.-38     	; 0x2678 <__udivmodsi4_loop>
    269e:	60 95       	com	r22
    26a0:	70 95       	com	r23
    26a2:	80 95       	com	r24
    26a4:	90 95       	com	r25
    26a6:	9b 01       	movw	r18, r22
    26a8:	ac 01       	movw	r20, r24
    26aa:	bd 01       	movw	r22, r26
    26ac:	cf 01       	movw	r24, r30
    26ae:	08 95       	ret

000026b0 <__prologue_saves__>:
    26b0:	2f 92       	push	r2
    26b2:	3f 92       	push	r3
    26b4:	4f 92       	push	r4
    26b6:	5f 92       	push	r5
    26b8:	6f 92       	push	r6
    26ba:	7f 92       	push	r7
    26bc:	8f 92       	push	r8
    26be:	9f 92       	push	r9
    26c0:	af 92       	push	r10
    26c2:	bf 92       	push	r11
    26c4:	cf 92       	push	r12
    26c6:	df 92       	push	r13
    26c8:	ef 92       	push	r14
    26ca:	ff 92       	push	r15
    26cc:	0f 93       	push	r16
    26ce:	1f 93       	push	r17
    26d0:	cf 93       	push	r28
    26d2:	df 93       	push	r29
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	ca 1b       	sub	r28, r26
    26da:	db 0b       	sbc	r29, r27
    26dc:	0f b6       	in	r0, 0x3f	; 63
    26de:	f8 94       	cli
    26e0:	de bf       	out	0x3e, r29	; 62
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	cd bf       	out	0x3d, r28	; 61
    26e6:	09 94       	ijmp

000026e8 <__epilogue_restores__>:
    26e8:	2a 88       	ldd	r2, Y+18	; 0x12
    26ea:	39 88       	ldd	r3, Y+17	; 0x11
    26ec:	48 88       	ldd	r4, Y+16	; 0x10
    26ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    26f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26fa:	b9 84       	ldd	r11, Y+9	; 0x09
    26fc:	c8 84       	ldd	r12, Y+8	; 0x08
    26fe:	df 80       	ldd	r13, Y+7	; 0x07
    2700:	ee 80       	ldd	r14, Y+6	; 0x06
    2702:	fd 80       	ldd	r15, Y+5	; 0x05
    2704:	0c 81       	ldd	r16, Y+4	; 0x04
    2706:	1b 81       	ldd	r17, Y+3	; 0x03
    2708:	aa 81       	ldd	r26, Y+2	; 0x02
    270a:	b9 81       	ldd	r27, Y+1	; 0x01
    270c:	ce 0f       	add	r28, r30
    270e:	d1 1d       	adc	r29, r1
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	ed 01       	movw	r28, r26
    271c:	08 95       	ret

0000271e <_exit>:
    271e:	f8 94       	cli

00002720 <__stop_program>:
    2720:	ff cf       	rjmp	.-2      	; 0x2720 <__stop_program>
